/* tslint:disable */
/* eslint-disable */
/**
 * AXECIEL.GMAO.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Equipement } from './Equipement';
import {
    EquipementFromJSON,
    EquipementFromJSONTyped,
    EquipementToJSON,
    EquipementToJSONTyped,
} from './Equipement';
import type { Compteur } from './Compteur';
import {
    CompteurFromJSON,
    CompteurFromJSONTyped,
    CompteurToJSON,
    CompteurToJSONTyped,
} from './Compteur';

/**
 * 
 * @export
 * @interface Localisation
 */
export interface Localisation {
    /**
     * 
     * @type {number}
     * @memberof Localisation
     */
    idLocalisation?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Localisation
     */
    nameLocalisation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Localisation
     */
    statutLib?: string | null;
    /**
     * 
     * @type {Array<Equipement>}
     * @memberof Localisation
     */
    equipement?: Array<Equipement> | null;
    /**
     * 
     * @type {Array<Compteur>}
     * @memberof Localisation
     */
    compteurs?: Array<Compteur> | null;
}

/**
 * Check if a given object implements the Localisation interface.
 */
export function instanceOfLocalisation(value: object): value is Localisation {
    return true;
}

export function LocalisationFromJSON(json: any): Localisation {
    return LocalisationFromJSONTyped(json, false);
}

export function LocalisationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Localisation {
    if (json == null) {
        return json;
    }
    return {
        
        'idLocalisation': json['idLocalisation'] == null ? undefined : json['idLocalisation'],
        'nameLocalisation': json['nameLocalisation'] == null ? undefined : json['nameLocalisation'],
        'statutLib': json['statutLib'] == null ? undefined : json['statutLib'],
        'equipement': json['equipement'] == null ? undefined : ((json['equipement'] as Array<any>).map(EquipementFromJSON)),
        'compteurs': json['compteurs'] == null ? undefined : ((json['compteurs'] as Array<any>).map(CompteurFromJSON)),
    };
}

export function LocalisationToJSON(json: any): Localisation {
    return LocalisationToJSONTyped(json, false);
}

export function LocalisationToJSONTyped(value?: Localisation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'idLocalisation': value['idLocalisation'],
        'nameLocalisation': value['nameLocalisation'],
        'statutLib': value['statutLib'],
        'equipement': value['equipement'] == null ? undefined : ((value['equipement'] as Array<any>).map(EquipementToJSON)),
        'compteurs': value['compteurs'] == null ? undefined : ((value['compteurs'] as Array<any>).map(CompteurToJSON)),
    };
}

