/* tslint:disable */
/* eslint-disable */
/**
 * AXECIEL.GMAO.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginInputDTO,
  PersonnelInfoAuthenticationDTO,
  StringResultDTO,
  UpdatePasswordInput,
} from '../models/index';
import {
    LoginInputDTOFromJSON,
    LoginInputDTOToJSON,
    PersonnelInfoAuthenticationDTOFromJSON,
    PersonnelInfoAuthenticationDTOToJSON,
    StringResultDTOFromJSON,
    StringResultDTOToJSON,
    UpdatePasswordInputFromJSON,
    UpdatePasswordInputToJSON,
} from '../models/index';

export interface ApiAuthenticationAddUserPostRequest {
    personnelInfoAuthenticationDTO?: PersonnelInfoAuthenticationDTO;
}

export interface ApiAuthenticationDesactiverUserPostRequest {
    token?: string;
    personnelInfoAuthenticationDTO?: PersonnelInfoAuthenticationDTO;
}

export interface ApiAuthenticationGetInfoUserGetRequest {
    token?: string;
}

export interface ApiAuthenticationLogOutPostRequest {
    token?: string;
}

export interface ApiAuthenticationLoginPostRequest {
    loginInputDTO?: LoginInputDTO;
}

export interface ApiAuthenticationUpdatePasswordPostRequest {
    token?: string;
    updatePasswordInput?: UpdatePasswordInput;
}

/**
 * AuthenticationApi - interface
 * 
 * @export
 * @interface AuthenticationApiInterface
 */
export interface AuthenticationApiInterface {
    /**
     * 
     * @param {PersonnelInfoAuthenticationDTO} [personnelInfoAuthenticationDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    apiAuthenticationAddUserPostRaw(requestParameters: ApiAuthenticationAddUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResultDTO>>;

    /**
     */
    apiAuthenticationAddUserPost(requestParameters: ApiAuthenticationAddUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResultDTO>;

    /**
     * 
     * @param {string} [token] 
     * @param {PersonnelInfoAuthenticationDTO} [personnelInfoAuthenticationDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    apiAuthenticationDesactiverUserPostRaw(requestParameters: ApiAuthenticationDesactiverUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResultDTO>>;

    /**
     */
    apiAuthenticationDesactiverUserPost(requestParameters: ApiAuthenticationDesactiverUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResultDTO>;

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    apiAuthenticationGetInfoUserGetRaw(requestParameters: ApiAuthenticationGetInfoUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonnelInfoAuthenticationDTO>>;

    /**
     */
    apiAuthenticationGetInfoUserGet(requestParameters: ApiAuthenticationGetInfoUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonnelInfoAuthenticationDTO>;

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    apiAuthenticationLogOutPostRaw(requestParameters: ApiAuthenticationLogOutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResultDTO>>;

    /**
     */
    apiAuthenticationLogOutPost(requestParameters: ApiAuthenticationLogOutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResultDTO>;

    /**
     * 
     * @param {LoginInputDTO} [loginInputDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    apiAuthenticationLoginPostRaw(requestParameters: ApiAuthenticationLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResultDTO>>;

    /**
     */
    apiAuthenticationLoginPost(requestParameters: ApiAuthenticationLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResultDTO>;

    /**
     * 
     * @param {string} [token] 
     * @param {UpdatePasswordInput} [updatePasswordInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    apiAuthenticationUpdatePasswordPostRaw(requestParameters: ApiAuthenticationUpdatePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResultDTO>>;

    /**
     */
    apiAuthenticationUpdatePasswordPost(requestParameters: ApiAuthenticationUpdatePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResultDTO>;

}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI implements AuthenticationApiInterface {

    /**
     */
    async apiAuthenticationAddUserPostRaw(requestParameters: ApiAuthenticationAddUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResultDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Authentication/addUser`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonnelInfoAuthenticationDTOToJSON(requestParameters['personnelInfoAuthenticationDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringResultDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationAddUserPost(requestParameters: ApiAuthenticationAddUserPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResultDTO> {
        const response = await this.apiAuthenticationAddUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthenticationDesactiverUserPostRaw(requestParameters: ApiAuthenticationDesactiverUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResultDTO>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Authentication/desactiverUser`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonnelInfoAuthenticationDTOToJSON(requestParameters['personnelInfoAuthenticationDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringResultDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationDesactiverUserPost(requestParameters: ApiAuthenticationDesactiverUserPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResultDTO> {
        const response = await this.apiAuthenticationDesactiverUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthenticationGetInfoUserGetRaw(requestParameters: ApiAuthenticationGetInfoUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonnelInfoAuthenticationDTO>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Authentication/getInfoUser`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonnelInfoAuthenticationDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationGetInfoUserGet(requestParameters: ApiAuthenticationGetInfoUserGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonnelInfoAuthenticationDTO> {
        const response = await this.apiAuthenticationGetInfoUserGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthenticationLogOutPostRaw(requestParameters: ApiAuthenticationLogOutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResultDTO>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Authentication/logOut`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringResultDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationLogOutPost(requestParameters: ApiAuthenticationLogOutPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResultDTO> {
        const response = await this.apiAuthenticationLogOutPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthenticationLoginPostRaw(requestParameters: ApiAuthenticationLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResultDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Authentication/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginInputDTOToJSON(requestParameters['loginInputDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringResultDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationLoginPost(requestParameters: ApiAuthenticationLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResultDTO> {
        const response = await this.apiAuthenticationLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthenticationUpdatePasswordPostRaw(requestParameters: ApiAuthenticationUpdatePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResultDTO>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Authentication/UpdatePassword`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePasswordInputToJSON(requestParameters['updatePasswordInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringResultDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationUpdatePasswordPost(requestParameters: ApiAuthenticationUpdatePasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResultDTO> {
        const response = await this.apiAuthenticationUpdatePasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
