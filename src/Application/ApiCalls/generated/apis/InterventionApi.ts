/* tslint:disable */
/* eslint-disable */
/**
 * AXECIEL.GMAO.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlerteDTOOuput,
  ArticleDevis,
  CompteurInfo,
  DeleteDrapeauxInput,
  DetailInterventionDTO,
  DrapeauxOutpuDTO,
  HistoriqueInterventionInput,
  HistoriqueInterventionOutput,
  OperationDetail,
  PlanningDTO,
  StringResultDTO,
  TranscriptionResponse,
} from '../models/index';
import {
    AlerteDTOOuputFromJSON,
    AlerteDTOOuputToJSON,
    ArticleDevisFromJSON,
    ArticleDevisToJSON,
    CompteurInfoFromJSON,
    CompteurInfoToJSON,
    DeleteDrapeauxInputFromJSON,
    DeleteDrapeauxInputToJSON,
    DetailInterventionDTOFromJSON,
    DetailInterventionDTOToJSON,
    DrapeauxOutpuDTOFromJSON,
    DrapeauxOutpuDTOToJSON,
    HistoriqueInterventionInputFromJSON,
    HistoriqueInterventionInputToJSON,
    HistoriqueInterventionOutputFromJSON,
    HistoriqueInterventionOutputToJSON,
    OperationDetailFromJSON,
    OperationDetailToJSON,
    PlanningDTOFromJSON,
    PlanningDTOToJSON,
    StringResultDTOFromJSON,
    StringResultDTOToJSON,
    TranscriptionResponseFromJSON,
    TranscriptionResponseToJSON,
} from '../models/index';

export interface ApiInterventionConvertAudioToTextPostRequest {
    token?: string;
    speechToText?: string;
    rapportVocalFiles?: Array<Blob>;
}

export interface ApiInterventionDeleteDrapeauPostRequest {
    token?: string;
    deleteDrapeauxInput?: DeleteDrapeauxInput;
}

export interface ApiInterventionGMAOGetRequest {
    token?: string;
}

export interface ApiInterventionGetAlertesGetRequest {
    token?: string;
}

export interface ApiInterventionGetDrapeuxGetRequest {
    token?: string;
}

export interface ApiInterventionGetHistoriqueInterventionPostRequest {
    token?: string;
    historiqueInterventionInput?: HistoriqueInterventionInput;
}

export interface ApiInterventionGetInfoInterventionGetRequest {
    token?: string;
    noIntervention?: string;
}

export interface ApiInterventionGetRapportVocalByNoInterventionGetRequest {
    token?: string;
    noIntervention?: string;
}

export interface ApiInterventionPlanningGetRequest {
    token?: string;
}

export interface ApiInterventionUpdateInterventionPostRequest {
    token?: string;
    noIntervention?: string;
    codeImmeuble?: string;
    devisEtablir?: number;
    bEvent?: boolean;
    noAstreint?: number;
    primeConventionnelle?: string;
    nomSignataire?: string;
    qualificationSignataire?: string;
    signature?: Blob;
    compteRendu?: string;
    latitudeDebutIntervention?: string;
    longitudeDebutIntervention?: string;
    latitudeFinIntervention?: string;
    longitudeFinIntervention?: string;
    latitudeDebutInterventionHZ?: string;
    longitudeDebutInterventionHZ?: string;
    latitudeFinInterventionHZ?: string;
    longitudeFinInterventionHZ?: string;
    dateDebut?: string;
    dateFin?: string;
    dateRealisation?: string;
    drapeau?: boolean;
    heuresSupp?: boolean;
    isAstreintte?: number;
    rapportVocalSpeechToText?: string;
    rapportVocalRapportVocalFiles?: Array<Blob>;
    interventionApresAvantFiles?: Array<Blob>;
    rapportFiles?: Array<Blob>;
    devisAvantTravauxListArticle?: Array<ArticleDevis>;
    devisAvantTravauxSignataire?: string;
    devisAvantTravauxSignature?: Blob;
    devisAvantTravauxModeReglement?: string;
    devisAvantTravauxFlagEmail?: boolean;
    devisAvantTravauxPhotosDevisAvantTravauxFiles?: Array<Blob>;
    demandeDeDevisFiles?: Array<Blob>;
    compteurInfo?: Array<CompteurInfo>;
    operationDetails?: Array<OperationDetail>;
}

/**
 * InterventionApi - interface
 * 
 * @export
 * @interface InterventionApiInterface
 */
export interface InterventionApiInterface {
    /**
     * 
     * @param {string} [token] 
     * @param {string} [speechToText] 
     * @param {Array<Blob>} [rapportVocalFiles] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApiInterface
     */
    apiInterventionConvertAudioToTextPostRaw(requestParameters: ApiInterventionConvertAudioToTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TranscriptionResponse>>;

    /**
     */
    apiInterventionConvertAudioToTextPost(requestParameters: ApiInterventionConvertAudioToTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TranscriptionResponse>;

    /**
     * 
     * @param {string} [token] 
     * @param {DeleteDrapeauxInput} [deleteDrapeauxInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApiInterface
     */
    apiInterventionDeleteDrapeauPostRaw(requestParameters: ApiInterventionDeleteDrapeauPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResultDTO>>;

    /**
     */
    apiInterventionDeleteDrapeauPost(requestParameters: ApiInterventionDeleteDrapeauPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResultDTO>;

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApiInterface
     */
    apiInterventionGMAOGetRaw(requestParameters: ApiInterventionGMAOGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanningDTO>>;

    /**
     */
    apiInterventionGMAOGet(requestParameters: ApiInterventionGMAOGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanningDTO>;

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApiInterface
     */
    apiInterventionGetAlertesGetRaw(requestParameters: ApiInterventionGetAlertesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlerteDTOOuput>>;

    /**
     */
    apiInterventionGetAlertesGet(requestParameters: ApiInterventionGetAlertesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlerteDTOOuput>;

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApiInterface
     */
    apiInterventionGetDrapeuxGetRaw(requestParameters: ApiInterventionGetDrapeuxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DrapeauxOutpuDTO>>;

    /**
     */
    apiInterventionGetDrapeuxGet(requestParameters: ApiInterventionGetDrapeuxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DrapeauxOutpuDTO>;

    /**
     * 
     * @param {string} [token] 
     * @param {HistoriqueInterventionInput} [historiqueInterventionInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApiInterface
     */
    apiInterventionGetHistoriqueInterventionPostRaw(requestParameters: ApiInterventionGetHistoriqueInterventionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HistoriqueInterventionOutput>>;

    /**
     */
    apiInterventionGetHistoriqueInterventionPost(requestParameters: ApiInterventionGetHistoriqueInterventionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HistoriqueInterventionOutput>;

    /**
     * 
     * @param {string} [token] 
     * @param {string} [noIntervention] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApiInterface
     */
    apiInterventionGetInfoInterventionGetRaw(requestParameters: ApiInterventionGetInfoInterventionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailInterventionDTO>>;

    /**
     */
    apiInterventionGetInfoInterventionGet(requestParameters: ApiInterventionGetInfoInterventionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailInterventionDTO>;

    /**
     * 
     * @param {string} [token] 
     * @param {string} [noIntervention] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApiInterface
     */
    apiInterventionGetRapportVocalByNoInterventionGetRaw(requestParameters: ApiInterventionGetRapportVocalByNoInterventionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiInterventionGetRapportVocalByNoInterventionGet(requestParameters: ApiInterventionGetRapportVocalByNoInterventionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApiInterface
     */
    apiInterventionPlanningGetRaw(requestParameters: ApiInterventionPlanningGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanningDTO>>;

    /**
     */
    apiInterventionPlanningGet(requestParameters: ApiInterventionPlanningGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanningDTO>;

    /**
     * 
     * @param {string} [token] 
     * @param {string} [noIntervention] 
     * @param {string} [codeImmeuble] 
     * @param {number} [devisEtablir] 
     * @param {boolean} [bEvent] 
     * @param {number} [noAstreint] 
     * @param {string} [primeConventionnelle] 
     * @param {string} [nomSignataire] 
     * @param {string} [qualificationSignataire] 
     * @param {Blob} [signature] 
     * @param {string} [compteRendu] 
     * @param {string} [latitudeDebutIntervention] 
     * @param {string} [longitudeDebutIntervention] 
     * @param {string} [latitudeFinIntervention] 
     * @param {string} [longitudeFinIntervention] 
     * @param {string} [latitudeDebutInterventionHZ] 
     * @param {string} [longitudeDebutInterventionHZ] 
     * @param {string} [latitudeFinInterventionHZ] 
     * @param {string} [longitudeFinInterventionHZ] 
     * @param {string} [dateDebut] 
     * @param {string} [dateFin] 
     * @param {string} [dateRealisation] 
     * @param {boolean} [drapeau] 
     * @param {boolean} [heuresSupp] 
     * @param {number} [isAstreintte] 
     * @param {string} [rapportVocalSpeechToText] 
     * @param {Array<Blob>} [rapportVocalRapportVocalFiles] 
     * @param {Array<Blob>} [interventionApresAvantFiles] 
     * @param {Array<Blob>} [rapportFiles] 
     * @param {Array<ArticleDevis>} [devisAvantTravauxListArticle] 
     * @param {string} [devisAvantTravauxSignataire] 
     * @param {Blob} [devisAvantTravauxSignature] 
     * @param {string} [devisAvantTravauxModeReglement] 
     * @param {boolean} [devisAvantTravauxFlagEmail] 
     * @param {Array<Blob>} [devisAvantTravauxPhotosDevisAvantTravauxFiles] 
     * @param {Array<Blob>} [demandeDeDevisFiles] 
     * @param {Array<CompteurInfo>} [compteurInfo] 
     * @param {Array<OperationDetail>} [operationDetails] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApiInterface
     */
    apiInterventionUpdateInterventionPostRaw(requestParameters: ApiInterventionUpdateInterventionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResultDTO>>;

    /**
     */
    apiInterventionUpdateInterventionPost(requestParameters: ApiInterventionUpdateInterventionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResultDTO>;

}

/**
 * 
 */
export class InterventionApi extends runtime.BaseAPI implements InterventionApiInterface {

    /**
     */
    async apiInterventionConvertAudioToTextPostRaw(requestParameters: ApiInterventionConvertAudioToTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TranscriptionResponse>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['speechToText'] != null) {
            formParams.append('speechToText', requestParameters['speechToText'] as any);
        }

        if (requestParameters['rapportVocalFiles'] != null) {
            requestParameters['rapportVocalFiles'].forEach((element) => {
                formParams.append('rapportVocal.files', element as any);
            })
        }


        let urlPath = `/api/Intervention/ConvertAudioToText`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TranscriptionResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiInterventionConvertAudioToTextPost(requestParameters: ApiInterventionConvertAudioToTextPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TranscriptionResponse> {
        const response = await this.apiInterventionConvertAudioToTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiInterventionDeleteDrapeauPostRaw(requestParameters: ApiInterventionDeleteDrapeauPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResultDTO>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Intervention/DeleteDrapeau`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteDrapeauxInputToJSON(requestParameters['deleteDrapeauxInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringResultDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiInterventionDeleteDrapeauPost(requestParameters: ApiInterventionDeleteDrapeauPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResultDTO> {
        const response = await this.apiInterventionDeleteDrapeauPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiInterventionGMAOGetRaw(requestParameters: ApiInterventionGMAOGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanningDTO>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Intervention/GMAO`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanningDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiInterventionGMAOGet(requestParameters: ApiInterventionGMAOGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanningDTO> {
        const response = await this.apiInterventionGMAOGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiInterventionGetAlertesGetRaw(requestParameters: ApiInterventionGetAlertesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlerteDTOOuput>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Intervention/GetAlertes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlerteDTOOuputFromJSON(jsonValue));
    }

    /**
     */
    async apiInterventionGetAlertesGet(requestParameters: ApiInterventionGetAlertesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlerteDTOOuput> {
        const response = await this.apiInterventionGetAlertesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiInterventionGetDrapeuxGetRaw(requestParameters: ApiInterventionGetDrapeuxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DrapeauxOutpuDTO>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Intervention/GetDrapeux`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DrapeauxOutpuDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiInterventionGetDrapeuxGet(requestParameters: ApiInterventionGetDrapeuxGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DrapeauxOutpuDTO> {
        const response = await this.apiInterventionGetDrapeuxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiInterventionGetHistoriqueInterventionPostRaw(requestParameters: ApiInterventionGetHistoriqueInterventionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HistoriqueInterventionOutput>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Intervention/getHistoriqueIntervention`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HistoriqueInterventionInputToJSON(requestParameters['historiqueInterventionInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HistoriqueInterventionOutputFromJSON(jsonValue));
    }

    /**
     */
    async apiInterventionGetHistoriqueInterventionPost(requestParameters: ApiInterventionGetHistoriqueInterventionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HistoriqueInterventionOutput> {
        const response = await this.apiInterventionGetHistoriqueInterventionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiInterventionGetInfoInterventionGetRaw(requestParameters: ApiInterventionGetInfoInterventionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailInterventionDTO>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['noIntervention'] != null) {
            queryParameters['NoIntervention'] = requestParameters['noIntervention'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Intervention/GetInfoIntervention`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetailInterventionDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiInterventionGetInfoInterventionGet(requestParameters: ApiInterventionGetInfoInterventionGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailInterventionDTO> {
        const response = await this.apiInterventionGetInfoInterventionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiInterventionGetRapportVocalByNoInterventionGetRaw(requestParameters: ApiInterventionGetRapportVocalByNoInterventionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['noIntervention'] != null) {
            queryParameters['noIntervention'] = requestParameters['noIntervention'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Intervention/GetRapportVocalByNoIntervention`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiInterventionGetRapportVocalByNoInterventionGet(requestParameters: ApiInterventionGetRapportVocalByNoInterventionGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiInterventionGetRapportVocalByNoInterventionGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiInterventionPlanningGetRaw(requestParameters: ApiInterventionPlanningGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanningDTO>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Intervention/Planning`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanningDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiInterventionPlanningGet(requestParameters: ApiInterventionPlanningGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanningDTO> {
        const response = await this.apiInterventionPlanningGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiInterventionUpdateInterventionPostRaw(requestParameters: ApiInterventionUpdateInterventionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResultDTO>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['noIntervention'] != null) {
            formParams.append('noIntervention', requestParameters['noIntervention'] as any);
        }

        if (requestParameters['codeImmeuble'] != null) {
            formParams.append('codeImmeuble', requestParameters['codeImmeuble'] as any);
        }

        if (requestParameters['devisEtablir'] != null) {
            formParams.append('devisEtablir', requestParameters['devisEtablir'] as any);
        }

        if (requestParameters['bEvent'] != null) {
            formParams.append('bEvent', requestParameters['bEvent'] as any);
        }

        if (requestParameters['noAstreint'] != null) {
            formParams.append('noAstreint', requestParameters['noAstreint'] as any);
        }

        if (requestParameters['primeConventionnelle'] != null) {
            formParams.append('primeConventionnelle', requestParameters['primeConventionnelle'] as any);
        }

        if (requestParameters['nomSignataire'] != null) {
            formParams.append('nomSignataire', requestParameters['nomSignataire'] as any);
        }

        if (requestParameters['qualificationSignataire'] != null) {
            formParams.append('qualificationSignataire', requestParameters['qualificationSignataire'] as any);
        }

        if (requestParameters['signature'] != null) {
            formParams.append('signature', requestParameters['signature'] as any);
        }

        if (requestParameters['compteRendu'] != null) {
            formParams.append('compteRendu', requestParameters['compteRendu'] as any);
        }

        if (requestParameters['latitudeDebutIntervention'] != null) {
            formParams.append('latitudeDebutIntervention', requestParameters['latitudeDebutIntervention'] as any);
        }

        if (requestParameters['longitudeDebutIntervention'] != null) {
            formParams.append('longitudeDebutIntervention', requestParameters['longitudeDebutIntervention'] as any);
        }

        if (requestParameters['latitudeFinIntervention'] != null) {
            formParams.append('latitudeFinIntervention', requestParameters['latitudeFinIntervention'] as any);
        }

        if (requestParameters['longitudeFinIntervention'] != null) {
            formParams.append('longitudeFinIntervention', requestParameters['longitudeFinIntervention'] as any);
        }

        if (requestParameters['latitudeDebutInterventionHZ'] != null) {
            formParams.append('latitudeDebutInterventionHZ', requestParameters['latitudeDebutInterventionHZ'] as any);
        }

        if (requestParameters['longitudeDebutInterventionHZ'] != null) {
            formParams.append('longitudeDebutInterventionHZ', requestParameters['longitudeDebutInterventionHZ'] as any);
        }

        if (requestParameters['latitudeFinInterventionHZ'] != null) {
            formParams.append('latitudeFinInterventionHZ', requestParameters['latitudeFinInterventionHZ'] as any);
        }

        if (requestParameters['longitudeFinInterventionHZ'] != null) {
            formParams.append('longitudeFinInterventionHZ', requestParameters['longitudeFinInterventionHZ'] as any);
        }

        if (requestParameters['dateDebut'] != null) {
            formParams.append('dateDebut', requestParameters['dateDebut'] as any);
        }

        if (requestParameters['dateFin'] != null) {
            formParams.append('dateFin', requestParameters['dateFin'] as any);
        }

        if (requestParameters['dateRealisation'] != null) {
            formParams.append('dateRealisation', requestParameters['dateRealisation'] as any);
        }

        if (requestParameters['drapeau'] != null) {
            formParams.append('drapeau', requestParameters['drapeau'] as any);
        }

        if (requestParameters['heuresSupp'] != null) {
            formParams.append('heuresSupp', requestParameters['heuresSupp'] as any);
        }

        if (requestParameters['isAstreintte'] != null) {
            formParams.append('isAstreintte', requestParameters['isAstreintte'] as any);
        }

        if (requestParameters['rapportVocalSpeechToText'] != null) {
            formParams.append('rapportVocal.speechToText', requestParameters['rapportVocalSpeechToText'] as any);
        }

        if (requestParameters['rapportVocalRapportVocalFiles'] != null) {
            requestParameters['rapportVocalRapportVocalFiles'].forEach((element) => {
                formParams.append('rapportVocal.rapportVocal.files', element as any);
            })
        }

        if (requestParameters['interventionApresAvantFiles'] != null) {
            requestParameters['interventionApresAvantFiles'].forEach((element) => {
                formParams.append('interventionApresAvant.files', element as any);
            })
        }

        if (requestParameters['rapportFiles'] != null) {
            requestParameters['rapportFiles'].forEach((element) => {
                formParams.append('rapport.files', element as any);
            })
        }

        if (requestParameters['devisAvantTravauxListArticle'] != null) {
            requestParameters['devisAvantTravauxListArticle'].forEach((element) => {
                formParams.append('devisAvantTravaux.listArticle', element as any);
            })
        }

        if (requestParameters['devisAvantTravauxSignataire'] != null) {
            formParams.append('devisAvantTravaux.signataire', requestParameters['devisAvantTravauxSignataire'] as any);
        }

        if (requestParameters['devisAvantTravauxSignature'] != null) {
            formParams.append('devisAvantTravaux.signature', requestParameters['devisAvantTravauxSignature'] as any);
        }

        if (requestParameters['devisAvantTravauxModeReglement'] != null) {
            formParams.append('devisAvantTravaux.modeReglement', requestParameters['devisAvantTravauxModeReglement'] as any);
        }

        if (requestParameters['devisAvantTravauxFlagEmail'] != null) {
            formParams.append('devisAvantTravaux.flagEmail', requestParameters['devisAvantTravauxFlagEmail'] as any);
        }

        if (requestParameters['devisAvantTravauxPhotosDevisAvantTravauxFiles'] != null) {
            requestParameters['devisAvantTravauxPhotosDevisAvantTravauxFiles'].forEach((element) => {
                formParams.append('devisAvantTravaux.photosDevisAvantTravaux.files', element as any);
            })
        }

        if (requestParameters['demandeDeDevisFiles'] != null) {
            requestParameters['demandeDeDevisFiles'].forEach((element) => {
                formParams.append('demandeDeDevis.files', element as any);
            })
        }

        if (requestParameters['compteurInfo'] != null) {
            requestParameters['compteurInfo'].forEach((element) => {
                formParams.append('compteurInfo', element as any);
            })
        }

        if (requestParameters['operationDetails'] != null) {
            requestParameters['operationDetails'].forEach((element) => {
                formParams.append('operationDetails', element as any);
            })
        }


        let urlPath = `/api/Intervention/updateIntervention`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringResultDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiInterventionUpdateInterventionPost(requestParameters: ApiInterventionUpdateInterventionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResultDTO> {
        const response = await this.apiInterventionUpdateInterventionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
