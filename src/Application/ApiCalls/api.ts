/* tslint:disable */
/* eslint-disable */
/**
 * AXECIEL.GMAO.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AjoutEvenementInput
 */
export interface AjoutEvenementInput {
    /**
     * 
     * @type {string}
     * @memberof AjoutEvenementInput
     */
    'commentaireEvenement'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AjoutEvenementInput
     */
    'longitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AjoutEvenementInput
     */
    'latitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AjoutEvenementInput
     */
    'suiDate'?: string;
}
/**
 * 
 * @export
 * @interface DrapeauxOutpuDTO
 */
export interface AlerteDTOOuput {
    /**
     * 
     * @type {string}
     * @memberof DrapeauxOutpuDTO
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DrapeauxOutpuDTO
     */
    'code'?: string | null;
    /**
     * 
     * @type {Array<DrapeauxOutput>}
     * @memberof DrapeauxOutpuDTO
     */
    'result'?: Array<AlerteDTO> | null;
}
/**
 * 
 * @export
 * @interface AlerteDTO
 */
export interface AlerteDTO {
    /**
     * 
     * @type {InfoImmeuble}
     * @memberof AlerteDTO
     */
    'info_Immeuble'?: InfoImmeuble;
    /**
     * 
     * @type {Infointervention}
     * @memberof AlerteDTO
     */
    'info_Intervention'?: Infointervention;
    /**
     * 
     * @type {InfoPersonnel}
     * @memberof AlerteDTO
     */
    'personnel'?: InfoPersonnel;
}
/**
 * 
 * @export
 * @interface ArticleDTO
 */
export interface ArticleDTO {
    /**
     * 
     * @type {MaterielDTO}
     * @memberof ArticleDTO
     */
    'materiel'?: MaterielDTO;
    /**
     * 
     * @type {MainOeuvreDTO}
     * @memberof ArticleDTO
     */
    'mainOeuvre'?: MainOeuvreDTO;
    /**
     * 
     * @type {Array<FacArticleDTO>}
     * @memberof ArticleDTO
     */
    'forfait'?: Array<FacArticleDTO> | null;
}
/**
 * 
 * @export
 * @interface ArticleDevis
 */
export interface ArticleDevis {
    /**
     * 
     * @type {string}
     * @memberof ArticleDevis
     */
    'codeArticle'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArticleDevis
     */
    'quantite'?: number | null;
}
/**
 * 
 * @export
 * @interface ArvalDTO
 */
export interface ArvalDTO {
    /**
     * 
     * @type {string}
     * @memberof ArvalDTO
     */
    'identifiant'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArvalDTO
     */
    'libelle'?: string | null;
}
/**
 * 
 * @export
 * @interface CheckSyncRequiredInput
 */
export interface CheckSyncRequiredInput {
    /**
     * 
     * @type {number}
     * @memberof CheckSyncRequiredInput
     */
    'identifiantSync'?: number;
    /**
     * 
     * @type {string}
     * @memberof CheckSyncRequiredInput
     */
    'addressMac'?: string | null;
}
/**
 * 
 * @export
 * @interface Composant
 */
export interface Composant {
    /**
     * 
     * @type {string}
     * @memberof Composant
     */
    'nomComposant'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Composant
     */
    'frequence'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Composant
     */
    'statutLib'?: string | null;
    /**
     * 
     * @type {Array<Controle>}
     * @memberof Composant
     */
    'controles'?: Array<Controle> | null;
}
/**
 * 
 * @export
 * @interface Compteur
 */
export interface Compteur {
    /**
     * 
     * @type {string}
     * @memberof Compteur
     */
    'numAppareil'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Compteur
     */
    'nomAppareil'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Compteur
     */
    'indexDebut'?: number | null;
}
/**
 * 
 * @export
 * @interface Controle
 */
export interface Controle {
    /**
     * 
     * @type {string}
     * @memberof Controle
     */
    'nomControle'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Controle
     */
    'moyen'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Controle
     */
    'anomalie'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Controle
     */
    'operation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Controle
     */
    'frequence'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Controle
     */
    'statutLib'?: string | null;
}
/**
 * 
 * @export
 * @interface CountOfItemsDTO
 */
export interface CountOfItemsDTO {
    /**
     * 
     * @type {number}
     * @memberof CountOfItemsDTO
     */
    'nbrIntervention'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CountOfItemsDTO
     */
    'nbrDrapeaux'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CountOfItemsDTO
     */
    'nbrAlertes'?: number | null;
}
/**
 * 
 * @export
 * @interface DateOnly
 */
export interface DateOnly {
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'year'?: number;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'month'?: number;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'day'?: number;
    /**
     * 
     * @type {DayOfWeek}
     * @memberof DateOnly
     */
    'dayOfWeek'?: DayOfWeek;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'dayOfYear'?: number;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'dayNumber'?: number;
}


/**
 * 
 * @export
 * @enum {number}
 */

export const DayOfWeek = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;

export type DayOfWeek = typeof DayOfWeek[keyof typeof DayOfWeek];


/**
 * 
 * @export
 * @interface DetailInterventionDTO
 */
export interface DetailInterventionDTO {
    /**
     * 
     * @type {string}
     * @memberof DetailInterventionDTO
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DetailInterventionDTO
     */
    'code'?: string | null;
    /**
     * 
     * @type {DetailInterventionDTOOutput}
     * @memberof DetailInterventionDTO
     */
    'result'?: DetailInterventionDTOOutput;
}
/**
 * 
 * @export
 * @interface DetailInterventionDTOOutput
 */
export interface DetailInterventionDTOOutput {
    /**
     * 
     * @type {Array<InfoIntervention>}
     * @memberof DetailInterventionDTOOutput
     */
    'infos_Intervention'?: Array<InfoIntervention> | null;
    /**
     * 
     * @type {Array<ImmeubleInfoDTO>}
     * @memberof DetailInterventionDTOOutput
     */
    'infos_Immeuble'?: Array<ImmeubleInfoDTO> | null;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof DetailInterventionDTOOutput
     */
    'infos_Statistiques'?: Array<{ [key: string]: any; }> | null;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof DetailInterventionDTOOutput
     */
    'infos_Prestation'?: Array<{ [key: string]: any; }> | null;
    /**
     * 
     * @type {Array<PrestationDTO>}
     * @memberof DetailInterventionDTOOutput
     */
    '__prestation'?: Array<PrestationDTO> | null;
    /**
     * 
     * @type {Array<ParticulierInfo>}
     * @memberof DetailInterventionDTOOutput
     */
    '__particuliers'?: Array<ParticulierInfo> | null;
}
/**
 * 
 * @export
 * @interface DevisCodeEtatDTO
 */
export interface DevisCodeEtatDTO {
    /**
     * 
     * @type {string}
     * @memberof DevisCodeEtatDTO
     */
    'code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DevisCodeEtatDTO
     */
    'libelle'?: string | null;
}
/**
 * 
 * @export
 * @interface DrapeauxOutpuDTO
 */
export interface DrapeauxOutpuDTO {
    /**
     * 
     * @type {string}
     * @memberof DrapeauxOutpuDTO
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DrapeauxOutpuDTO
     */
    'code'?: string | null;
    /**
     * 
     * @type {Array<DrapeauxOutput>}
     * @memberof DrapeauxOutpuDTO
     */
    'result'?: Array<DrapeauxOutput> | null;
}
/**
 * 
 * @export
 * @interface DrapeauxOutput
 */
export interface DrapeauxOutput {
    /**
     * 
     * @type {string}
     * @memberof DrapeauxOutput
     */
    'noIntervention'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DrapeauxOutput
     */
    'codeImmeuble'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DrapeauxOutput
     */
    'adressImmeuble'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DrapeauxOutput
     */
    'designation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DrapeauxOutput
     */
    'dateRealise'?: string | null;
}
/**
 * 
 * @export
 * @interface EnregistrerVehiculeInput
 */
export interface EnregistrerVehiculeInput {
    /**
     * 
     * @type {number}
     * @memberof EnregistrerVehiculeInput
     */
    'actionSurVehicule'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnregistrerVehiculeInput
     */
    'immatriculation'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnregistrerVehiculeInput
     */
    'kilometrage'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnregistrerVehiculeInput
     */
    'declarationProbleme'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnregistrerVehiculeInput
     */
    'commentairevehiculeImmobilise'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnregistrerVehiculeInput
     */
    'voyantOrange'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnregistrerVehiculeInput
     */
    'arvCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnregistrerVehiculeInput
     */
    'nettoyageInterieur'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnregistrerVehiculeInput
     */
    'dateNettoyageInterieur'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnregistrerVehiculeInput
     */
    'nettoyageExterieur'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnregistrerVehiculeInput
     */
    'dateNettoyageExterieur'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnregistrerVehiculeInput
     */
    'etatFlocage'?: string | null;
}
/**
 * 
 * @export
 * @interface Equipement
 */
export interface Equipement {
    /**
     * 
     * @type {string}
     * @memberof Equipement
     */
    'nameEquipement'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Equipement
     */
    'statutLib'?: string | null;
    /**
     * 
     * @type {Array<Composant>}
     * @memberof Equipement
     */
    'composants'?: Array<Composant> | null;
}
/**
 * 
 * @export
 * @interface FacArticleDTO
 */
export interface FacArticleDTO {
    /**
     * 
     * @type {string}
     * @memberof FacArticleDTO
     */
    'codeArticle'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FacArticleDTO
     */
    'designation'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FacArticleDTO
     */
    'mobilite'?: number;
    /**
     * 
     * @type {number}
     * @memberof FacArticleDTO
     */
    'totalHt'?: number;
    /**
     * 
     * @type {string}
     * @memberof FacArticleDTO
     */
    'famdCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FacArticleDTO
     */
    'famsdCode'?: string | null;
}
/**
 * 
 * @export
 * @interface FamilleDevisDTO
 */
export interface FamilleDevisDTO {
    /**
     * 
     * @type {number}
     * @memberof FamilleDevisDTO
     */
    'identifiant'?: number;
    /**
     * 
     * @type {string}
     * @memberof FamilleDevisDTO
     */
    'code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FamilleDevisDTO
     */
    'designation'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FamilleDevisDTO
     */
    'famdOrdre'?: number | null;
}
/**
 * 
 * @export
 * @interface FlocageDTO
 */
export interface FlocageDTO {
    /**
     * 
     * @type {string}
     * @memberof FlocageDTO
     */
    'identifiant'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FlocageDTO
     */
    'libelle'?: string | null;
}
/**
 * 
 * @export
 * @interface HistoriqueDevis
 */
export interface HistoriqueDevis {
    /**
     * 
     * @type {string}
     * @memberof HistoriqueDevis
     */
    'numeroDevis'?: string | null;
    /**
     * 
     * @type {DevisCodeEtatDTO}
     * @memberof HistoriqueDevis
     */
    'codeEtat'?: DevisCodeEtatDTO;
    /**
     * 
     * @type {string}
     * @memberof HistoriqueDevis
     */
    'titreDevis'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HistoriqueDevis
     */
    'dateCreation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HistoriqueDevis
     */
    'dateAcceptation'?: string | null;
}
/**
 * 
 * @export
 * @interface HistoriqueDevisInput
 */
export interface HistoriqueDevisInput {
    /**
     * 
     * @type {string}
     * @memberof HistoriqueDevisInput
     */
    'codeImmeuble'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HistoriqueDevisInput
     */
    'dateDepart'?: string | null;
}
/**
 * 
 * @export
 * @interface HistoriqueDevisOutput
 */
export interface HistoriqueDevisOutput {
    /**
     * 
     * @type {string}
     * @memberof HistoriqueDevisOutput
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HistoriqueDevisOutput
     */
    'code'?: string | null;
    /**
     * 
     * @type {Array<HistoriqueDevis>}
     * @memberof HistoriqueDevisOutput
     */
    'result'?: Array<HistoriqueDevis> | null;
}
/**
 * 
 * @export
 * @interface HistoriqueIntervention
 */
export interface HistoriqueIntervention {
    /**
     * 
     * @type {string}
     * @memberof HistoriqueIntervention
     */
    'noIntervention'?: string | null;
    /**
     * 
     * @type {InterventionCodeEtatDTO}
     * @memberof HistoriqueIntervention
     */
    'codeEtat'?: InterventionCodeEtatDTO;
    /**
     * 
     * @type {string}
     * @memberof HistoriqueIntervention
     */
    'designation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HistoriqueIntervention
     */
    'dateRealise'?: string | null;
}
/**
 * 
 * @export
 * @interface HistoriqueInterventionInput
 */
export interface HistoriqueInterventionInput {
    /**
     * 
     * @type {string}
     * @memberof HistoriqueInterventionInput
     */
    'codeImmeuble'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HistoriqueInterventionInput
     */
    'dateDepart'?: string | null;
}
/**
 * 
 * @export
 * @interface HistoriqueInterventionOutput
 */
export interface HistoriqueInterventionOutput {
    /**
     * 
     * @type {string}
     * @memberof HistoriqueInterventionOutput
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HistoriqueInterventionOutput
     */
    'code'?: string | null;
    /**
     * 
     * @type {Array<HistoriqueIntervention>}
     * @memberof HistoriqueInterventionOutput
     */
    'result'?: Array<HistoriqueIntervention> | null;
}
/**
 * 
 * @export
 * @interface ImmeubleDTO
 */
export interface ImmeubleDTO {
    /**
     * 
     * @type {ImmeubleInfoDTO}
     * @memberof ImmeubleDTO
     */
    'immeubleInfo'?: ImmeubleInfoDTO;
    /**
     * 
     * @type {PersonnelInfoDTO}
     * @memberof ImmeubleDTO
     */
    'personnelInfo'?: PersonnelInfoDTO;
    /**
     * 
     * @type {TVATypeDTO}
     * @memberof ImmeubleDTO
     */
    'tvaInfo'?: TVATypeDTO;
}
/**
 * 
 * @export
 * @interface ImmeubleInfoDTO
 */
export interface ImmeubleInfoDTO {
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'adresse'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'adresse_2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'angle_rue'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'cp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'ville'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'situation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'accès_specifique'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'horaire_Loge'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'gardien'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'tel_Gardien'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'tel_Portable_Gardien'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'fax_Gardien'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'gardien_2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'tel_Gardien_2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'tel_Portable_Gardien_2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'fax_Gardien_2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'boite_clé'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'code_1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'code_2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'code_3'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'commercial'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'dépanneur'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'type_contrat'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'energie'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'président_du_conseil_syndical'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'commentaire_technique'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'vingtquatre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    'amiante_DTA'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    '__Canon'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ImmeubleInfoDTO
     */
    '__Prioritaire'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    '__Latitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleInfoDTO
     */
    '__Longitude'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ImmeubleInfoDTO
     */
    '__ChaudCondensation'?: number | null;
}
/**
 * 
 * @export
 * @interface ImmeubleOutPutDTO
 */
export interface ImmeubleOutPutDTO {
    /**
     * 
     * @type {string}
     * @memberof ImmeubleOutPutDTO
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImmeubleOutPutDTO
     */
    'code'?: string | null;
    /**
     * 
     * @type {Array<ImmeubleDTO>}
     * @memberof ImmeubleOutPutDTO
     */
    'result'?: Array<ImmeubleDTO> | null;
    /**
     * 
     * @type {number}
     * @memberof ImmeubleOutPutDTO
     */
    'nbrItems'?: number;
}
/**
 * 
 * @export
 * @interface InfoImmeuble
 */
export interface InfoImmeuble {
    /**
     * 
     * @type {string}
     * @memberof InfoImmeuble
     */
    'adresse'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoImmeuble
     */
    'codePostal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoImmeuble
     */
    'ville'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoImmeuble
     */
    'codeAcces1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoImmeuble
     */
    'codeImmeuble'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoImmeuble
     */
    'situation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoImmeuble
     */
    'codeDepanneur'?: string | null;
}
/**
 * 
 * @export
 * @interface InfoIntervention
 */
export interface InfoIntervention {
    /**
     * 
     * @type {number}
     * @memberof InfoIntervention
     */
    '__NoIntervention'?: number;
    /**
     * 
     * @type {string}
     * @memberof InfoIntervention
     */
    'libellé_article'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoIntervention
     */
    'commentaire'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoIntervention
     */
    'info_complémentaire'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InfoIntervention
     */
    'urgence'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InfoIntervention
     */
    'tel'?: string | null;
}
/**
 * 
 * @export
 * @interface InfoPersonnel
 */
export interface InfoPersonnel {
    /**
     * 
     * @type {string}
     * @memberof InfoPersonnel
     */
    'prenomInterv'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoPersonnel
     */
    'nomInterv'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoPersonnel
     */
    'memoGuard'?: string | null;
}
/**
 * 
 * @export
 * @interface InfoSupp
 */
export interface InfoSupp {
    /**
     * 
     * @type {number}
     * @memberof InfoSupp
     */
    'nbrDrapeaux'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InfoSupp
     */
    'nbrAlertes'?: number | null;
}
/**
 * 
 * @export
 * @interface Infointervention
 */
export interface Infointervention {
    /**
     * 
     * @type {string}
     * @memberof Infointervention
     */
    'codeEtat'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Infointervention
     */
    'alerteEnvoyePDA'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Infointervention
     */
    'designation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Infointervention
     */
    'commentaire'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Infointervention
     */
    'noIntervention'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Infointervention
     */
    'intervenant'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Infointervention
     */
    'article'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Infointervention
     */
    'dateRealise'?: string | null;
}
/**
 * 
 * @export
 * @interface InterventionCodeEtatDTO
 */
export interface InterventionCodeEtatDTO {
    /**
     * 
     * @type {string}
     * @memberof InterventionCodeEtatDTO
     */
    'code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InterventionCodeEtatDTO
     */
    'libelleCodeEtat'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InterventionCodeEtatDTO
     */
    'codeCouleur'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InterventionCodeEtatDTO
     */
    'codeCouleurCaractere'?: string | null;
}
/**
 * 
 * @export
 * @interface InterventionPlanningDTO
 */
export interface InterventionPlanningDTO {
    /**
     * 
     * @type {string}
     * @memberof InterventionPlanningDTO
     */
    'noIntervention'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InterventionPlanningDTO
     */
    'codeImmeuble'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InterventionPlanningDTO
     */
    'adressImmeuble'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InterventionPlanningDTO
     */
    'designation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InterventionPlanningDTO
     */
    'datePrevu'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof InterventionPlanningDTO
     */
    '__urgence'?: boolean;
    /**
     * 
     * @type {InterventionCodeEtatDTO}
     * @memberof InterventionPlanningDTO
     */
    'codeEtat'?: InterventionCodeEtatDTO;
}
/**
 * 
 * @export
 * @interface Localisation
 */
export interface Localisation {
    /**
     * 
     * @type {string}
     * @memberof Localisation
     */
    'nameLocalisation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Localisation
     */
    'statutLib'?: string | null;
    /**
     * 
     * @type {Array<Equipement>}
     * @memberof Localisation
     */
    'equipement'?: Array<Equipement> | null;
    /**
     * 
     * @type {Array<Compteur>}
     * @memberof Localisation
     */
    'compteurs'?: Array<Compteur> | null;
}
/**
 * 
 * @export
 * @interface LoginInputDTO
 */
export interface LoginInputDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginInputDTO
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginInputDTO
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface MainOeuvreDTO
 */
export interface MainOeuvreDTO {
    /**
     * 
     * @type {Array<FacArticleDTO>}
     * @memberof MainOeuvreDTO
     */
    'simple'?: Array<FacArticleDTO> | null;
    /**
     * 
     * @type {Array<FacArticleDTO>}
     * @memberof MainOeuvreDTO
     */
    'equipe'?: Array<FacArticleDTO> | null;
    /**
     * 
     * @type {Array<FacArticleDTO>}
     * @memberof MainOeuvreDTO
     */
    'nuit'?: Array<FacArticleDTO> | null;
}
/**
 * 
 * @export
 * @interface MaterielDTO
 */
export interface MaterielDTO {
    /**
     * 
     * @type {Array<FacArticleDTO>}
     * @memberof MaterielDTO
     */
    'robinets'?: Array<FacArticleDTO> | null;
    /**
     * 
     * @type {Array<FacArticleDTO>}
     * @memberof MaterielDTO
     */
    'purgeurs'?: Array<FacArticleDTO> | null;
    /**
     * 
     * @type {Array<FacArticleDTO>}
     * @memberof MaterielDTO
     */
    'tes'?: Array<FacArticleDTO> | null;
    /**
     * 
     * @type {Array<FacArticleDTO>}
     * @memberof MaterielDTO
     */
    'divers'?: Array<FacArticleDTO> | null;
}
/**
 * 
 * @export
 * @interface ParticulierInfo
 */
export interface ParticulierInfo {
    /**
     * 
     * @type {string}
     * @memberof ParticulierInfo
     */
    'codeParticulier'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParticulierInfo
     */
    'nomParticulier'?: string | null;
}
/**
 * 
 * @export
 * @interface PersonnelInfoAuthenticationDTO
 */
export interface PersonnelInfoAuthenticationDTO {
    /**
     * 
     * @type {string}
     * @memberof PersonnelInfoAuthenticationDTO
     */
    'nom'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonnelInfoAuthenticationDTO
     */
    'prenom'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonnelInfoAuthenticationDTO
     */
    'matricule'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonnelInfoAuthenticationDTO
     */
    'login'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonnelInfoAuthenticationDTO
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonnelInfoAuthenticationDTO
     */
    'codeRole'?: string | null;
}
/**
 * 
 * @export
 * @interface PersonnelInfoDTO
 */
export interface PersonnelInfoDTO {
    /**
     * 
     * @type {string}
     * @memberof PersonnelInfoDTO
     */
    'nom'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonnelInfoDTO
     */
    'prenom'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonnelInfoDTO
     */
    'nomDep'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonnelInfoDTO
     */
    'prenomDep'?: string | null;
}
/**
 * 
 * @export
 * @interface PlanningDTO
 */
export interface PlanningDTO {
    /**
     * 
     * @type {string}
     * @memberof PlanningDTO
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlanningDTO
     */
    'code'?: string | null;
    /**
     * 
     * @type {PlanningDTOOutput}
     * @memberof PlanningDTO
     */
    'result'?: PlanningDTOOutput;
}
/**
 * 
 * @export
 * @interface PlanningDTOOutput
 */
export interface PlanningDTOOutput {
    /**
     * 
     * @type {Array<InterventionPlanningDTO>}
     * @memberof PlanningDTOOutput
     */
    'interventionJour'?: Array<InterventionPlanningDTO> | null;
    /**
     * 
     * @type {Array<InterventionPlanningDTO>}
     * @memberof PlanningDTOOutput
     */
    'interventionEnAttente'?: Array<InterventionPlanningDTO> | null;
    /**
     * 
     * @type {Array<InterventionPlanningDTO>}
     * @memberof PlanningDTOOutput
     */
    'historiqueIntervention'?: Array<InterventionPlanningDTO> | null;
}
/**
 * 
 * @export
 * @interface PrestationDTO
 */
export interface PrestationDTO {
    /**
     * 
     * @type {string}
     * @memberof PrestationDTO
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PrestationDTO
     */
    'code'?: string | null;
    /**
     * 
     * @type {Array<Localisation>}
     * @memberof PrestationDTO
     */
    'localisations'?: Array<Localisation> | null;
}
/**
 * 
 * @export
 * @interface PriPrimeDTO
 */
export interface PriPrimeDTO {
    /**
     * 
     * @type {number}
     * @memberof PriPrimeDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PriPrimeDTO
     */
    'code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PriPrimeDTO
     */
    'libelle'?: string | null;
}
/**
 * 
 * @export
 * @interface ProblemeVehiculeDTO
 */
export interface ProblemeVehiculeDTO {
    /**
     * 
     * @type {string}
     * @memberof ProblemeVehiculeDTO
     */
    'identifiant'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemeVehiculeDTO
     */
    'libelle'?: string | null;
}
/**
 * 
 * @export
 * @interface QualificationDTO
 */
export interface QualificationDTO {
    /**
     * 
     * @type {string}
     * @memberof QualificationDTO
     */
    'code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QualificationDTO
     */
    'qualification'?: string | null;
}
/**
 * 
 * @export
 * @interface RepReglementPDADTO
 */
export interface RepReglementPDADTO {
    /**
     * 
     * @type {string}
     * @memberof RepReglementPDADTO
     */
    'code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RepReglementPDADTO
     */
    'designation'?: string | null;
}
/**
 * 
 * @export
 * @interface SousFamilleDevisDTO
 */
export interface SousFamilleDevisDTO {
    /**
     * 
     * @type {number}
     * @memberof SousFamilleDevisDTO
     */
    'identifiant'?: number;
    /**
     * 
     * @type {string}
     * @memberof SousFamilleDevisDTO
     */
    'code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SousFamilleDevisDTO
     */
    'famdCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SousFamilleDevisDTO
     */
    'designation'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SousFamilleDevisDTO
     */
    'famsdOrdre'?: number | null;
}
/**
 * 
 * @export
 * @interface StringResultDTO
 */
export interface StringResultDTO {
    /**
     * 
     * @type {string}
     * @memberof StringResultDTO
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StringResultDTO
     */
    'value'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StringResultDTO
     */
    'role'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StringResultDTO
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StringResultDTO
     */
    'name'?: string | null;
    /**
     * 
     * @type {InfoSupp}
     * @memberof StringResultDTO
     */
    'infoSupp'?: InfoSupp;
}
/**
 * 
 * @export
 * @interface SyncOutput
 */
export interface SyncOutput {
    /**
     * 
     * @type {string}
     * @memberof SyncOutput
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SyncOutput
     */
    'code'?: string | null;
    /**
     * 
     * @type {Array<ImmeubleDTO>}
     * @memberof SyncOutput
     */
    'result'?: Array<ImmeubleDTO> | null;
}
/**
 * 
 * @export
 * @interface TVATypeDTO
 */
export interface TVATypeDTO {
    /**
     * 
     * @type {string}
     * @memberof TVATypeDTO
     */
    'tvaCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TVATypeDTO
     */
    'tvaTva'?: number | null;
}
/**
 * 
 * @export
 * @interface TechnicienDTO
 */
export interface TechnicienDTO {
    /**
     * 
     * @type {string}
     * @memberof TechnicienDTO
     */
    'matricule'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TechnicienDTO
     */
    'nom'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TechnicienDTO
     */
    'prenom'?: string | null;
}
/**
 * 
 * @export
 * @interface TranscriptionResponse
 */
export interface TranscriptionResponse {
    /**
     * 
     * @type {string}
     * @memberof TranscriptionResponse
     */
    'text'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdatePasswordInput
 */
export interface UpdatePasswordInput {
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordInput
     */
    'oldPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordInput
     */
    'newPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordInput
     */
    'confirmPassword'?: string | null;
}
/**
 * 
 * @export
 * @interface WeatherForecast
 */
export interface WeatherForecast {
    /**
     * 
     * @type {DateOnly}
     * @memberof WeatherForecast
     */
    'date'?: DateOnly;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    'temperatureC'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    'temperatureF'?: number;
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    'summary'?: string | null;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PersonnelInfoAuthenticationDTO} [personnelInfoAuthenticationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticationAddUserPost: async (personnelInfoAuthenticationDTO?: PersonnelInfoAuthenticationDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Authentication/addUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(personnelInfoAuthenticationDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {PersonnelInfoAuthenticationDTO} [personnelInfoAuthenticationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticationDesactiverUserPost: async (token?: string, personnelInfoAuthenticationDTO?: PersonnelInfoAuthenticationDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Authentication/desactiverUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(personnelInfoAuthenticationDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticationGetInfoUserGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Authentication/getInfoUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticationLogOutPost: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Authentication/logOut`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginInputDTO} [loginInputDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticationLoginPost: async (loginInputDTO?: LoginInputDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Authentication/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options, withCredentials : false };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(loginInputDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {UpdatePasswordInput} [updatePasswordInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticationUpdatePasswordPost: async (token?: string, updatePasswordInput?: UpdatePasswordInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Authentication/UpdatePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(updatePasswordInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PersonnelInfoAuthenticationDTO} [personnelInfoAuthenticationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthenticationAddUserPost(personnelInfoAuthenticationDTO?: PersonnelInfoAuthenticationDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthenticationAddUserPost(personnelInfoAuthenticationDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiAuthenticationAddUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {PersonnelInfoAuthenticationDTO} [personnelInfoAuthenticationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthenticationDesactiverUserPost(token?: string, personnelInfoAuthenticationDTO?: PersonnelInfoAuthenticationDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthenticationDesactiverUserPost(token, personnelInfoAuthenticationDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiAuthenticationDesactiverUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthenticationGetInfoUserGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonnelInfoAuthenticationDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthenticationGetInfoUserGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiAuthenticationGetInfoUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthenticationLogOutPost(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthenticationLogOutPost(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiAuthenticationLogOutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginInputDTO} [loginInputDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthenticationLoginPost(loginInputDTO?: LoginInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthenticationLoginPost(loginInputDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiAuthenticationLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {UpdatePasswordInput} [updatePasswordInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthenticationUpdatePasswordPost(token?: string, updatePasswordInput?: UpdatePasswordInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthenticationUpdatePasswordPost(token, updatePasswordInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiAuthenticationUpdatePasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @param {PersonnelInfoAuthenticationDTO} [personnelInfoAuthenticationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticationAddUserPost(personnelInfoAuthenticationDTO?: PersonnelInfoAuthenticationDTO, options?: RawAxiosRequestConfig): AxiosPromise<StringResultDTO> {
            return localVarFp.apiAuthenticationAddUserPost(personnelInfoAuthenticationDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {PersonnelInfoAuthenticationDTO} [personnelInfoAuthenticationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticationDesactiverUserPost(token?: string, personnelInfoAuthenticationDTO?: PersonnelInfoAuthenticationDTO, options?: RawAxiosRequestConfig): AxiosPromise<StringResultDTO> {
            return localVarFp.apiAuthenticationDesactiverUserPost(token, personnelInfoAuthenticationDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticationGetInfoUserGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<PersonnelInfoAuthenticationDTO> {
            return localVarFp.apiAuthenticationGetInfoUserGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticationLogOutPost(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<StringResultDTO> {
            return localVarFp.apiAuthenticationLogOutPost(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginInputDTO} [loginInputDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticationLoginPost(loginInputDTO?: LoginInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<StringResultDTO> {
            return localVarFp.apiAuthenticationLoginPost(loginInputDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {UpdatePasswordInput} [updatePasswordInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticationUpdatePasswordPost(token?: string, updatePasswordInput?: UpdatePasswordInput, options?: RawAxiosRequestConfig): AxiosPromise<StringResultDTO> {
            return localVarFp.apiAuthenticationUpdatePasswordPost(token, updatePasswordInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @param {PersonnelInfoAuthenticationDTO} [personnelInfoAuthenticationDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiAuthenticationAddUserPost(personnelInfoAuthenticationDTO?: PersonnelInfoAuthenticationDTO, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiAuthenticationAddUserPost(personnelInfoAuthenticationDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {PersonnelInfoAuthenticationDTO} [personnelInfoAuthenticationDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiAuthenticationDesactiverUserPost(token?: string, personnelInfoAuthenticationDTO?: PersonnelInfoAuthenticationDTO, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiAuthenticationDesactiverUserPost(token, personnelInfoAuthenticationDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiAuthenticationGetInfoUserGet(token?: string, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiAuthenticationGetInfoUserGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiAuthenticationLogOutPost(token?: string, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiAuthenticationLogOutPost(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginInputDTO} [loginInputDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiAuthenticationLoginPost(loginInputDTO?: LoginInputDTO, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiAuthenticationLoginPost(loginInputDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {UpdatePasswordInput} [updatePasswordInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiAuthenticationUpdatePasswordPost(token?: string, updatePasswordInput?: UpdatePasswordInput, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiAuthenticationUpdatePasswordPost(token, updatePasswordInput, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GestionEvenementApi - axios parameter creator
 * @export
 */
export const GestionEvenementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {AjoutEvenementInput} [ajoutEvenementInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGestionEvenementAjoutEvenementPost: async (token?: string, ajoutEvenementInput?: AjoutEvenementInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/GestionEvenement/ajoutEvenement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(ajoutEvenementInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {EnregistrerVehiculeInput} [enregistrerVehiculeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGestionEvenementGetInfoenregistrerVehiculeImmeublePost: async (token?: string, enregistrerVehiculeInput?: EnregistrerVehiculeInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/GestionEvenement/GetInfoenregistrerVehiculeImmeuble`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(enregistrerVehiculeInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GestionEvenementApi - functional programming interface
 * @export
 */
export const GestionEvenementApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = GestionEvenementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {AjoutEvenementInput} [ajoutEvenementInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGestionEvenementAjoutEvenementPost(token?: string, ajoutEvenementInput?: AjoutEvenementInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGestionEvenementAjoutEvenementPost(token, ajoutEvenementInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GestionEvenementApi.apiGestionEvenementAjoutEvenementPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {EnregistrerVehiculeInput} [enregistrerVehiculeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGestionEvenementGetInfoenregistrerVehiculeImmeublePost(token?: string, enregistrerVehiculeInput?: EnregistrerVehiculeInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGestionEvenementGetInfoenregistrerVehiculeImmeublePost(token, enregistrerVehiculeInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GestionEvenementApi.apiGestionEvenementGetInfoenregistrerVehiculeImmeublePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GestionEvenementApi - factory interface
 * @export
 */
export const GestionEvenementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GestionEvenementApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {AjoutEvenementInput} [ajoutEvenementInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGestionEvenementAjoutEvenementPost(token?: string, ajoutEvenementInput?: AjoutEvenementInput, options?: RawAxiosRequestConfig): AxiosPromise<StringResultDTO> {
            return localVarFp.apiGestionEvenementAjoutEvenementPost(token, ajoutEvenementInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {EnregistrerVehiculeInput} [enregistrerVehiculeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGestionEvenementGetInfoenregistrerVehiculeImmeublePost(token?: string, enregistrerVehiculeInput?: EnregistrerVehiculeInput, options?: RawAxiosRequestConfig): AxiosPromise<StringResultDTO> {
            return localVarFp.apiGestionEvenementGetInfoenregistrerVehiculeImmeublePost(token, enregistrerVehiculeInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GestionEvenementApi - object-oriented interface
 * @export
 * @class GestionEvenementApi
 * @extends {BaseAPI}
 */
export class GestionEvenementApi extends BaseAPI {
    /**
     * 
     * @param {string} [token] 
     * @param {AjoutEvenementInput} [ajoutEvenementInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestionEvenementApi
     */
    public apiGestionEvenementAjoutEvenementPost(token?: string, ajoutEvenementInput?: AjoutEvenementInput, options?: RawAxiosRequestConfig) {
        return GestionEvenementApiFp(this.configuration).apiGestionEvenementAjoutEvenementPost(token, ajoutEvenementInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {EnregistrerVehiculeInput} [enregistrerVehiculeInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestionEvenementApi
     */
    public apiGestionEvenementGetInfoenregistrerVehiculeImmeublePost(token?: string, enregistrerVehiculeInput?: EnregistrerVehiculeInput, options?: RawAxiosRequestConfig) {
        return GestionEvenementApiFp(this.configuration).apiGestionEvenementGetInfoenregistrerVehiculeImmeublePost(token, enregistrerVehiculeInput, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ImmeubleApi - axios parameter creator
 * @export
 */
export const ImmeubleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {CheckSyncRequiredInput} [checkSyncRequiredInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImmeubleCheckSyncIsRequiredPost: async (token?: string, checkSyncRequiredInput?: CheckSyncRequiredInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Immeuble/checkSyncIsRequired`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(checkSyncRequiredInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {CheckSyncRequiredInput} [checkSyncRequiredInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImmeubleConfirmSyncPost: async (token?: string, checkSyncRequiredInput?: CheckSyncRequiredInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Immeuble/confirmSync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(checkSyncRequiredInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {HistoriqueDevisInput} [historiqueDevisInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImmeubleGetHistoriqueDevisImmeublePost: async (token?: string, historiqueDevisInput?: HistoriqueDevisInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Immeuble/getHistoriqueDevisImmeuble`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(historiqueDevisInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {CheckSyncRequiredInput} [checkSyncRequiredInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImmeubleGetImmeublesToSyncPost: async (token?: string, checkSyncRequiredInput?: CheckSyncRequiredInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Immeuble/getImmeublesToSync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(checkSyncRequiredInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImmeubleGetInfoImmeubleGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Immeuble/GetInfoImmeuble`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImmeubleGetInfoImmeublePaginationGet: async (token?: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Immeuble/GetInfoImmeublePagination`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImmeubleApi - functional programming interface
 * @export
 */
export const ImmeubleApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ImmeubleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {CheckSyncRequiredInput} [checkSyncRequiredInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImmeubleCheckSyncIsRequiredPost(token?: string, checkSyncRequiredInput?: CheckSyncRequiredInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImmeubleCheckSyncIsRequiredPost(token, checkSyncRequiredInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImmeubleApi.apiImmeubleCheckSyncIsRequiredPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {CheckSyncRequiredInput} [checkSyncRequiredInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImmeubleConfirmSyncPost(token?: string, checkSyncRequiredInput?: CheckSyncRequiredInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImmeubleConfirmSyncPost(token, checkSyncRequiredInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImmeubleApi.apiImmeubleConfirmSyncPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {HistoriqueDevisInput} [historiqueDevisInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImmeubleGetHistoriqueDevisImmeublePost(token?: string, historiqueDevisInput?: HistoriqueDevisInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HistoriqueDevisOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImmeubleGetHistoriqueDevisImmeublePost(token, historiqueDevisInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImmeubleApi.apiImmeubleGetHistoriqueDevisImmeublePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {CheckSyncRequiredInput} [checkSyncRequiredInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImmeubleGetImmeublesToSyncPost(token?: string, checkSyncRequiredInput?: CheckSyncRequiredInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImmeubleGetImmeublesToSyncPost(token, checkSyncRequiredInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImmeubleApi.apiImmeubleGetImmeublesToSyncPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImmeubleGetInfoImmeubleGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImmeubleOutPutDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImmeubleGetInfoImmeubleGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImmeubleApi.apiImmeubleGetInfoImmeubleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImmeubleGetInfoImmeublePaginationGet(token?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImmeubleOutPutDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImmeubleGetInfoImmeublePaginationGet(token, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImmeubleApi.apiImmeubleGetInfoImmeublePaginationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImmeubleApi - factory interface
 * @export
 */
export const ImmeubleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImmeubleApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {CheckSyncRequiredInput} [checkSyncRequiredInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImmeubleCheckSyncIsRequiredPost(token?: string, checkSyncRequiredInput?: CheckSyncRequiredInput, options?: RawAxiosRequestConfig): AxiosPromise<SyncOutput> {
            return localVarFp.apiImmeubleCheckSyncIsRequiredPost(token, checkSyncRequiredInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {CheckSyncRequiredInput} [checkSyncRequiredInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImmeubleConfirmSyncPost(token?: string, checkSyncRequiredInput?: CheckSyncRequiredInput, options?: RawAxiosRequestConfig): AxiosPromise<SyncOutput> {
            return localVarFp.apiImmeubleConfirmSyncPost(token, checkSyncRequiredInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {HistoriqueDevisInput} [historiqueDevisInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImmeubleGetHistoriqueDevisImmeublePost(token?: string, historiqueDevisInput?: HistoriqueDevisInput, options?: RawAxiosRequestConfig): AxiosPromise<HistoriqueDevisOutput> {
            return localVarFp.apiImmeubleGetHistoriqueDevisImmeublePost(token, historiqueDevisInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {CheckSyncRequiredInput} [checkSyncRequiredInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImmeubleGetImmeublesToSyncPost(token?: string, checkSyncRequiredInput?: CheckSyncRequiredInput, options?: RawAxiosRequestConfig): AxiosPromise<SyncOutput> {
            return localVarFp.apiImmeubleGetImmeublesToSyncPost(token, checkSyncRequiredInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImmeubleGetInfoImmeubleGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ImmeubleOutPutDTO>> {
            return localVarFp.apiImmeubleGetInfoImmeubleGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImmeubleGetInfoImmeublePaginationGet(token?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ImmeubleOutPutDTO>> {
            return localVarFp.apiImmeubleGetInfoImmeublePaginationGet(token, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImmeubleApi - object-oriented interface
 * @export
 * @class ImmeubleApi
 * @extends {BaseAPI}
 */
export class ImmeubleApi extends BaseAPI {
    /**
     * 
     * @param {string} [token] 
     * @param {CheckSyncRequiredInput} [checkSyncRequiredInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImmeubleApi
     */
    public apiImmeubleCheckSyncIsRequiredPost(token?: string, checkSyncRequiredInput?: CheckSyncRequiredInput, options?: RawAxiosRequestConfig) {
        return ImmeubleApiFp(this.configuration).apiImmeubleCheckSyncIsRequiredPost(token, checkSyncRequiredInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {CheckSyncRequiredInput} [checkSyncRequiredInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImmeubleApi
     */
    public apiImmeubleConfirmSyncPost(token?: string, checkSyncRequiredInput?: CheckSyncRequiredInput, options?: RawAxiosRequestConfig) {
        return ImmeubleApiFp(this.configuration).apiImmeubleConfirmSyncPost(token, checkSyncRequiredInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {HistoriqueDevisInput} [historiqueDevisInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImmeubleApi
     */
    public apiImmeubleGetHistoriqueDevisImmeublePost(token?: string, historiqueDevisInput?: HistoriqueDevisInput, options?: RawAxiosRequestConfig) {
        return ImmeubleApiFp(this.configuration).apiImmeubleGetHistoriqueDevisImmeublePost(token, historiqueDevisInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {CheckSyncRequiredInput} [checkSyncRequiredInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImmeubleApi
     */
    public apiImmeubleGetImmeublesToSyncPost(token?: string, checkSyncRequiredInput?: CheckSyncRequiredInput, options?: RawAxiosRequestConfig) {
        return ImmeubleApiFp(this.configuration).apiImmeubleGetImmeublesToSyncPost(token, checkSyncRequiredInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImmeubleApi
     */
    public apiImmeubleGetInfoImmeubleGet(token?: string, options?: RawAxiosRequestConfig) {
        return ImmeubleApiFp(this.configuration).apiImmeubleGetInfoImmeubleGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImmeubleApi
     */
    public apiImmeubleGetInfoImmeublePaginationGet(token?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ImmeubleApiFp(this.configuration).apiImmeubleGetInfoImmeublePaginationGet(token, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InterventionApi - axios parameter creator
 * @export
 */
export const InterventionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [speechToText] 
         * @param {Array<File>} [rapportVocalFiles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionConvertAudioToTextPost: async (token?: string, speechToText?: string, rapportVocalFiles?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Intervention/ConvertAudioToText`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


            if (speechToText !== undefined) {
                localVarFormParams.append('speechToText', speechToText as any);
            }
            if (rapportVocalFiles) {
                console.log(rapportVocalFiles);

                rapportVocalFiles.forEach((element) => {
                    localVarFormParams.append('rapportVocal.files', element as any);
                })
            }



            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            console.log(localVarFormParams);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;
            console.log({
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            });

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionGMAOGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Intervention/GMAO`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionGetAlertesGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Intervention/GetAlertes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionGetDrapeuxGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Intervention/GetDrapeux`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {HistoriqueInterventionInput} [historiqueInterventionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionGetHistoriqueInterventionPost: async (token?: string, historiqueInterventionInput?: HistoriqueInterventionInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Intervention/getHistoriqueIntervention`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(historiqueInterventionInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [noIntervention] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionGetInfoInterventionGet: async (token?: string, noIntervention?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Intervention/GetInfoIntervention`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (noIntervention !== undefined) {
                localVarQueryParameter['NoIntervention'] = noIntervention;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [noIntervention] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionGetRapportVocalByNoInterventionGet: async (token?: string, noIntervention?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Intervention/GetRapportVocalByNoIntervention`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (noIntervention !== undefined) {
                localVarQueryParameter['noIntervention'] = noIntervention;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionPlanningGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Intervention/Planning`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [noIntervention] 
         * @param {string} [codeImmeuble] 
         * @param {number} [devisEtablir] 
         * @param {boolean} [bEvent] 
         * @param {number} [noAstreint] 
         * @param {string} [primeConventionnelle] 
         * @param {string} [nomSignataire] 
         * @param {string} [qualificationSignataire] 
         * @param {File} [signature] 
         * @param {string} [compteRendu] 
         * @param {string} [latitudeDebutIntervention] 
         * @param {string} [longitudeDebutIntervention] 
         * @param {string} [latitudeFinIntervention] 
         * @param {string} [longitudeFinIntervention] 
         * @param {string} [latitudeDebutInterventionHZ] 
         * @param {string} [longitudeDebutInterventionHZ] 
         * @param {string} [latitudeFinInterventionHZ] 
         * @param {string} [longitudeFinInterventionHZ] 
         * @param {string} [dateDebut] 
         * @param {string} [dateFin] 
         * @param {string} [dateRealisation] 
         * @param {boolean} [drapeau] 
         * @param {boolean} [heuresSupp] 
         * @param {number} [isAstreintte] 
         * @param {string} [rapportVocalSpeechToText] 
         * @param {Array<File>} [rapportVocalRapportVocalFiles] 
         * @param {Array<File>} [interventionApresAvantFiles] 
         * @param {Array<File>} [rapportFiles] 
         * @param {Array<ArticleDevis>} [devisAvantTravauxListArticle] 
         * @param {string} [devisAvantTravauxSignataire] 
         * @param {File} [devisAvantTravauxSignature] 
         * @param {string} [devisAvantTravauxModeReglement] 
         * @param {boolean} [devisAvantTravauxFlagEmail] 
         * @param {Array<File>} [devisAvantTravauxPhotosDevisAvantTravauxFiles] 
         * @param {Array<File>} [demandeDeDevisFiles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionUpdateInterventionPost: async (token?: string, noIntervention?: string, codeImmeuble?: string, devisEtablir?: number, bEvent?: boolean, noAstreint?: number, primeConventionnelle?: string, nomSignataire?: string, qualificationSignataire?: string, signature?: File, compteRendu?: string, latitudeDebutIntervention?: string, longitudeDebutIntervention?: string, latitudeFinIntervention?: string, longitudeFinIntervention?: string, latitudeDebutInterventionHZ?: string, longitudeDebutInterventionHZ?: string, latitudeFinInterventionHZ?: string, longitudeFinInterventionHZ?: string, dateDebut?: string, dateFin?: string, dateRealisation?: string, drapeau?: boolean, heuresSupp?: boolean, isAstreintte?: number, rapportVocalSpeechToText?: string, rapportVocalRapportVocalFiles?: Array<File>, interventionApresAvantFiles?: Array<File>, rapportFiles?: Array<File>, devisAvantTravauxListArticle?: Array<ArticleDevis>, devisAvantTravauxSignataire?: string, devisAvantTravauxSignature?: File, devisAvantTravauxModeReglement?: string, devisAvantTravauxFlagEmail?: boolean, devisAvantTravauxPhotosDevisAvantTravauxFiles?: Array<File>, demandeDeDevisFiles?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Intervention/updateIntervention`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


            if (noIntervention !== undefined) {
                localVarFormParams.append('noIntervention', noIntervention as any);
            }

            if (codeImmeuble !== undefined) {
                localVarFormParams.append('codeImmeuble', codeImmeuble as any);
            }

            if (devisEtablir !== undefined) {
                localVarFormParams.append('devisEtablir', devisEtablir as any);
            }

            if (bEvent !== undefined) {
                localVarFormParams.append('bEvent', String(bEvent) as any);
            }

            if (noAstreint !== undefined) {
                localVarFormParams.append('noAstreint', noAstreint as any);
            }

            if (primeConventionnelle !== undefined) {
                localVarFormParams.append('primeConventionnelle', primeConventionnelle as any);
            }

            if (nomSignataire !== undefined) {
                localVarFormParams.append('nomSignataire', nomSignataire as any);
            }

            if (qualificationSignataire !== undefined) {
                localVarFormParams.append('qualificationSignataire', qualificationSignataire as any);
            }

            if (signature !== undefined) {
                localVarFormParams.append('signature', signature as any);
            }

            if (compteRendu !== undefined) {
                localVarFormParams.append('compteRendu', compteRendu as any);
            }

            if (latitudeDebutIntervention !== undefined) {
                localVarFormParams.append('latitudeDebutIntervention', latitudeDebutIntervention as any);
            }

            if (longitudeDebutIntervention !== undefined) {
                localVarFormParams.append('longitudeDebutIntervention', longitudeDebutIntervention as any);
            }

            if (latitudeFinIntervention !== undefined) {
                localVarFormParams.append('latitudeFinIntervention', latitudeFinIntervention as any);
            }

            if (longitudeFinIntervention !== undefined) {
                localVarFormParams.append('longitudeFinIntervention', longitudeFinIntervention as any);
            }

            if (latitudeDebutInterventionHZ !== undefined) {
                localVarFormParams.append('latitudeDebutInterventionHZ', latitudeDebutInterventionHZ as any);
            }

            if (longitudeDebutInterventionHZ !== undefined) {
                localVarFormParams.append('longitudeDebutInterventionHZ', longitudeDebutInterventionHZ as any);
            }

            if (latitudeFinInterventionHZ !== undefined) {
                localVarFormParams.append('latitudeFinInterventionHZ', latitudeFinInterventionHZ as any);
            }

            if (longitudeFinInterventionHZ !== undefined) {
                localVarFormParams.append('longitudeFinInterventionHZ', longitudeFinInterventionHZ as any);
            }

            if (dateDebut !== undefined) {
                localVarFormParams.append('dateDebut', dateDebut as any);
            }

            if (dateFin !== undefined) {
                localVarFormParams.append('dateFin', dateFin as any);
            }

            if (dateRealisation !== undefined) {
                localVarFormParams.append('dateRealisation', dateRealisation as any);
            }

            if (drapeau !== undefined) {
                localVarFormParams.append('drapeau', String(drapeau) as any);
            }

            if (heuresSupp !== undefined) {
                localVarFormParams.append('heuresSupp', String(heuresSupp) as any);
            }

            if (isAstreintte !== undefined) {
                localVarFormParams.append('isAstreintte', isAstreintte as any);
            }

            if (rapportVocalSpeechToText !== undefined) {
                localVarFormParams.append('rapportVocal.speechToText', rapportVocalSpeechToText as any);
            }
            if (rapportVocalRapportVocalFiles) {
                rapportVocalRapportVocalFiles.forEach((element) => {
                    localVarFormParams.append('rapportVocal.rapportVocal.files', element as any);
                })
            }

            if (interventionApresAvantFiles) {
                interventionApresAvantFiles.forEach((element) => {
                    localVarFormParams.append('interventionApresAvant.files', element as any);
                })
            }

            if (rapportFiles) {
                rapportFiles.forEach((element) => {
                    localVarFormParams.append('rapport.files', element as any);
                })
            }

            if (devisAvantTravauxListArticle) {
                devisAvantTravauxListArticle.forEach((element) => {
                    localVarFormParams.append('devisAvantTravaux.listArticle', element as any);
                })
            }


            if (devisAvantTravauxSignataire !== undefined) {
                localVarFormParams.append('devisAvantTravaux.signataire', devisAvantTravauxSignataire as any);
            }

            if (devisAvantTravauxSignature !== undefined) {
                localVarFormParams.append('devisAvantTravaux.signature', devisAvantTravauxSignature as any);
            }

            if (devisAvantTravauxModeReglement !== undefined) {
                localVarFormParams.append('devisAvantTravaux.modeReglement', devisAvantTravauxModeReglement as any);
            }

            if (devisAvantTravauxFlagEmail !== undefined) {
                localVarFormParams.append('devisAvantTravaux.flagEmail', String(devisAvantTravauxFlagEmail) as any);
            }
            if (devisAvantTravauxPhotosDevisAvantTravauxFiles) {
                devisAvantTravauxPhotosDevisAvantTravauxFiles.forEach((element) => {
                    localVarFormParams.append('devisAvantTravaux.photosDevisAvantTravaux.files', element as any);
                })
            }

            if (demandeDeDevisFiles) {
                demandeDeDevisFiles.forEach((element) => {
                    localVarFormParams.append('demandeDeDevis.files', element as any);
                })
            }



            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InterventionApi - functional programming interface
 * @export
 */
export const InterventionApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = InterventionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [speechToText] 
         * @param {Array<File>} [rapportVocalFiles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInterventionConvertAudioToTextPost(token?: string, speechToText?: string, rapportVocalFiles?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TranscriptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInterventionConvertAudioToTextPost(token, speechToText, rapportVocalFiles, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InterventionApi.apiInterventionConvertAudioToTextPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInterventionGMAOGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanningDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInterventionGMAOGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InterventionApi.apiInterventionGMAOGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInterventionGetAlertesGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlerteDTOOuput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInterventionGetAlertesGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InterventionApi.apiInterventionGetAlertesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInterventionGetDrapeuxGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrapeauxOutpuDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInterventionGetDrapeuxGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InterventionApi.apiInterventionGetDrapeuxGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {HistoriqueInterventionInput} [historiqueInterventionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInterventionGetHistoriqueInterventionPost(token?: string, historiqueInterventionInput?: HistoriqueInterventionInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HistoriqueInterventionOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInterventionGetHistoriqueInterventionPost(token, historiqueInterventionInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InterventionApi.apiInterventionGetHistoriqueInterventionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [noIntervention] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInterventionGetInfoInterventionGet(token?: string, noIntervention?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailInterventionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInterventionGetInfoInterventionGet(token, noIntervention, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InterventionApi.apiInterventionGetInfoInterventionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [noIntervention] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInterventionGetRapportVocalByNoInterventionGet(token?: string, noIntervention?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInterventionGetRapportVocalByNoInterventionGet(token, noIntervention, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InterventionApi.apiInterventionGetRapportVocalByNoInterventionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInterventionPlanningGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanningDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInterventionPlanningGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InterventionApi.apiInterventionPlanningGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [noIntervention] 
         * @param {string} [codeImmeuble] 
         * @param {number} [devisEtablir] 
         * @param {boolean} [bEvent] 
         * @param {number} [noAstreint] 
         * @param {string} [primeConventionnelle] 
         * @param {string} [nomSignataire] 
         * @param {string} [qualificationSignataire] 
         * @param {File} [signature] 
         * @param {string} [compteRendu] 
         * @param {string} [latitudeDebutIntervention] 
         * @param {string} [longitudeDebutIntervention] 
         * @param {string} [latitudeFinIntervention] 
         * @param {string} [longitudeFinIntervention] 
         * @param {string} [latitudeDebutInterventionHZ] 
         * @param {string} [longitudeDebutInterventionHZ] 
         * @param {string} [latitudeFinInterventionHZ] 
         * @param {string} [longitudeFinInterventionHZ] 
         * @param {string} [dateDebut] 
         * @param {string} [dateFin] 
         * @param {string} [dateRealisation] 
         * @param {boolean} [drapeau] 
         * @param {boolean} [heuresSupp] 
         * @param {number} [isAstreintte] 
         * @param {string} [rapportVocalSpeechToText] 
         * @param {Array<File>} [rapportVocalRapportVocalFiles] 
         * @param {Array<File>} [interventionApresAvantFiles] 
         * @param {Array<File>} [rapportFiles] 
         * @param {Array<ArticleDevis>} [devisAvantTravauxListArticle] 
         * @param {string} [devisAvantTravauxSignataire] 
         * @param {File} [devisAvantTravauxSignature] 
         * @param {string} [devisAvantTravauxModeReglement] 
         * @param {boolean} [devisAvantTravauxFlagEmail] 
         * @param {Array<File>} [devisAvantTravauxPhotosDevisAvantTravauxFiles] 
         * @param {Array<File>} [demandeDeDevisFiles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInterventionUpdateInterventionPost(token?: string, noIntervention?: string, codeImmeuble?: string, devisEtablir?: number, bEvent?: boolean, noAstreint?: number, primeConventionnelle?: string, nomSignataire?: string, qualificationSignataire?: string, signature?: File, compteRendu?: string, latitudeDebutIntervention?: string, longitudeDebutIntervention?: string, latitudeFinIntervention?: string, longitudeFinIntervention?: string, latitudeDebutInterventionHZ?: string, longitudeDebutInterventionHZ?: string, latitudeFinInterventionHZ?: string, longitudeFinInterventionHZ?: string, dateDebut?: string, dateFin?: string, dateRealisation?: string, drapeau?: boolean, heuresSupp?: boolean, isAstreintte?: number, rapportVocalSpeechToText?: string, rapportVocalRapportVocalFiles?: Array<File>, interventionApresAvantFiles?: Array<File>, rapportFiles?: Array<File>, devisAvantTravauxListArticle?: Array<ArticleDevis>, devisAvantTravauxSignataire?: string, devisAvantTravauxSignature?: File, devisAvantTravauxModeReglement?: string, devisAvantTravauxFlagEmail?: boolean, devisAvantTravauxPhotosDevisAvantTravauxFiles?: Array<File>, demandeDeDevisFiles?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInterventionUpdateInterventionPost(token, noIntervention, codeImmeuble, devisEtablir, bEvent, noAstreint, primeConventionnelle, nomSignataire, qualificationSignataire, signature, compteRendu, latitudeDebutIntervention, longitudeDebutIntervention, latitudeFinIntervention, longitudeFinIntervention, latitudeDebutInterventionHZ, longitudeDebutInterventionHZ, latitudeFinInterventionHZ, longitudeFinInterventionHZ, dateDebut, dateFin, dateRealisation, drapeau, heuresSupp, isAstreintte, rapportVocalSpeechToText, rapportVocalRapportVocalFiles, interventionApresAvantFiles, rapportFiles, devisAvantTravauxListArticle, devisAvantTravauxSignataire, devisAvantTravauxSignature, devisAvantTravauxModeReglement, devisAvantTravauxFlagEmail, devisAvantTravauxPhotosDevisAvantTravauxFiles, demandeDeDevisFiles, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InterventionApi.apiInterventionUpdateInterventionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InterventionApi - factory interface
 * @export
 */
export const InterventionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InterventionApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [speechToText] 
         * @param {Array<File>} [rapportVocalFiles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionConvertAudioToTextPost(token?: string, speechToText?: string, rapportVocalFiles?: Array<File>, options?: RawAxiosRequestConfig): AxiosPromise<TranscriptionResponse> {
            return localVarFp.apiInterventionConvertAudioToTextPost(token, speechToText, rapportVocalFiles, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionGMAOGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<PlanningDTO> {
            return localVarFp.apiInterventionGMAOGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionGetAlertesGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<AlerteDTO>> {
            return localVarFp.apiInterventionGetAlertesGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionGetDrapeuxGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<DrapeauxOutpuDTO> {
            return localVarFp.apiInterventionGetDrapeuxGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {HistoriqueInterventionInput} [historiqueInterventionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionGetHistoriqueInterventionPost(token?: string, historiqueInterventionInput?: HistoriqueInterventionInput, options?: RawAxiosRequestConfig): AxiosPromise<HistoriqueInterventionOutput> {
            return localVarFp.apiInterventionGetHistoriqueInterventionPost(token, historiqueInterventionInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [noIntervention] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionGetInfoInterventionGet(token?: string, noIntervention?: string, options?: RawAxiosRequestConfig): AxiosPromise<DetailInterventionDTO> {
            return localVarFp.apiInterventionGetInfoInterventionGet(token, noIntervention, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [noIntervention] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionGetRapportVocalByNoInterventionGet(token?: string, noIntervention?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiInterventionGetRapportVocalByNoInterventionGet(token, noIntervention, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionPlanningGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<PlanningDTO> {
            return localVarFp.apiInterventionPlanningGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [noIntervention] 
         * @param {string} [codeImmeuble] 
         * @param {number} [devisEtablir] 
         * @param {boolean} [bEvent] 
         * @param {number} [noAstreint] 
         * @param {string} [primeConventionnelle] 
         * @param {string} [nomSignataire] 
         * @param {string} [qualificationSignataire] 
         * @param {File} [signature] 
         * @param {string} [compteRendu] 
         * @param {string} [latitudeDebutIntervention] 
         * @param {string} [longitudeDebutIntervention] 
         * @param {string} [latitudeFinIntervention] 
         * @param {string} [longitudeFinIntervention] 
         * @param {string} [latitudeDebutInterventionHZ] 
         * @param {string} [longitudeDebutInterventionHZ] 
         * @param {string} [latitudeFinInterventionHZ] 
         * @param {string} [longitudeFinInterventionHZ] 
         * @param {string} [dateDebut] 
         * @param {string} [dateFin] 
         * @param {string} [dateRealisation] 
         * @param {boolean} [drapeau] 
         * @param {boolean} [heuresSupp] 
         * @param {number} [isAstreintte] 
         * @param {string} [rapportVocalSpeechToText] 
         * @param {Array<File>} [rapportVocalRapportVocalFiles] 
         * @param {Array<File>} [interventionApresAvantFiles] 
         * @param {Array<File>} [rapportFiles] 
         * @param {Array<ArticleDevis>} [devisAvantTravauxListArticle] 
         * @param {string} [devisAvantTravauxSignataire] 
         * @param {File} [devisAvantTravauxSignature] 
         * @param {string} [devisAvantTravauxModeReglement] 
         * @param {boolean} [devisAvantTravauxFlagEmail] 
         * @param {Array<File>} [devisAvantTravauxPhotosDevisAvantTravauxFiles] 
         * @param {Array<File>} [demandeDeDevisFiles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInterventionUpdateInterventionPost(token?: string, noIntervention?: string, codeImmeuble?: string, devisEtablir?: number, bEvent?: boolean, noAstreint?: number, primeConventionnelle?: string, nomSignataire?: string, qualificationSignataire?: string, signature?: File, compteRendu?: string, latitudeDebutIntervention?: string, longitudeDebutIntervention?: string, latitudeFinIntervention?: string, longitudeFinIntervention?: string, latitudeDebutInterventionHZ?: string, longitudeDebutInterventionHZ?: string, latitudeFinInterventionHZ?: string, longitudeFinInterventionHZ?: string, dateDebut?: string, dateFin?: string, dateRealisation?: string, drapeau?: boolean, heuresSupp?: boolean, isAstreintte?: number, rapportVocalSpeechToText?: string, rapportVocalRapportVocalFiles?: Array<File>, interventionApresAvantFiles?: Array<File>, rapportFiles?: Array<File>, devisAvantTravauxListArticle?: Array<ArticleDevis>, devisAvantTravauxSignataire?: string, devisAvantTravauxSignature?: File, devisAvantTravauxModeReglement?: string, devisAvantTravauxFlagEmail?: boolean, devisAvantTravauxPhotosDevisAvantTravauxFiles?: Array<File>, demandeDeDevisFiles?: Array<File>, options?: RawAxiosRequestConfig): AxiosPromise<StringResultDTO> {
            return localVarFp.apiInterventionUpdateInterventionPost(token, noIntervention, codeImmeuble, devisEtablir, bEvent, noAstreint, primeConventionnelle, nomSignataire, qualificationSignataire, signature, compteRendu, latitudeDebutIntervention, longitudeDebutIntervention, latitudeFinIntervention, longitudeFinIntervention, latitudeDebutInterventionHZ, longitudeDebutInterventionHZ, latitudeFinInterventionHZ, longitudeFinInterventionHZ, dateDebut, dateFin, dateRealisation, drapeau, heuresSupp, isAstreintte, rapportVocalSpeechToText, rapportVocalRapportVocalFiles, interventionApresAvantFiles, rapportFiles, devisAvantTravauxListArticle, devisAvantTravauxSignataire, devisAvantTravauxSignature, devisAvantTravauxModeReglement, devisAvantTravauxFlagEmail, devisAvantTravauxPhotosDevisAvantTravauxFiles, demandeDeDevisFiles, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InterventionApi - object-oriented interface
 * @export
 * @class InterventionApi
 * @extends {BaseAPI}
 */
export class InterventionApi extends BaseAPI {
    /**
     * 
     * @param {string} [token] 
     * @param {string} [speechToText] 
     * @param {Array<File>} [rapportVocalFiles] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApi
     */
    public apiInterventionConvertAudioToTextPost(token?: string, speechToText?: string, rapportVocalFiles?: Array<File>, options?: RawAxiosRequestConfig) {
        return InterventionApiFp(this.configuration).apiInterventionConvertAudioToTextPost(token, speechToText, rapportVocalFiles, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApi
     */
    public apiInterventionGMAOGet(token?: string, options?: RawAxiosRequestConfig) {
        return InterventionApiFp(this.configuration).apiInterventionGMAOGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApi
     */
    public apiInterventionGetAlertesGet(token?: string, options?: RawAxiosRequestConfig) {
        return InterventionApiFp(this.configuration).apiInterventionGetAlertesGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApi
     */
    public apiInterventionGetDrapeuxGet(token?: string, options?: RawAxiosRequestConfig) {
        return InterventionApiFp(this.configuration).apiInterventionGetDrapeuxGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {HistoriqueInterventionInput} [historiqueInterventionInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApi
     */
    public apiInterventionGetHistoriqueInterventionPost(token?: string, historiqueInterventionInput?: HistoriqueInterventionInput, options?: RawAxiosRequestConfig) {
        return InterventionApiFp(this.configuration).apiInterventionGetHistoriqueInterventionPost(token, historiqueInterventionInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [noIntervention] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApi
     */
    public apiInterventionGetInfoInterventionGet(token?: string, noIntervention?: string, options?: RawAxiosRequestConfig) {
        return InterventionApiFp(this.configuration).apiInterventionGetInfoInterventionGet(token, noIntervention, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [noIntervention] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApi
     */
    public apiInterventionGetRapportVocalByNoInterventionGet(token?: string, noIntervention?: string, options?: RawAxiosRequestConfig) {
        return InterventionApiFp(this.configuration).apiInterventionGetRapportVocalByNoInterventionGet(token, noIntervention, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApi
     */
    public apiInterventionPlanningGet(token?: string, options?: RawAxiosRequestConfig) {
        return InterventionApiFp(this.configuration).apiInterventionPlanningGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [noIntervention] 
     * @param {string} [codeImmeuble] 
     * @param {number} [devisEtablir] 
     * @param {boolean} [bEvent] 
     * @param {number} [noAstreint] 
     * @param {string} [primeConventionnelle] 
     * @param {string} [nomSignataire] 
     * @param {string} [qualificationSignataire] 
     * @param {File} [signature] 
     * @param {string} [compteRendu] 
     * @param {string} [latitudeDebutIntervention] 
     * @param {string} [longitudeDebutIntervention] 
     * @param {string} [latitudeFinIntervention] 
     * @param {string} [longitudeFinIntervention] 
     * @param {string} [latitudeDebutInterventionHZ] 
     * @param {string} [longitudeDebutInterventionHZ] 
     * @param {string} [latitudeFinInterventionHZ] 
     * @param {string} [longitudeFinInterventionHZ] 
     * @param {string} [dateDebut] 
     * @param {string} [dateFin] 
     * @param {string} [dateRealisation] 
     * @param {boolean} [drapeau] 
     * @param {boolean} [heuresSupp] 
     * @param {number} [isAstreintte] 
     * @param {string} [rapportVocalSpeechToText] 
     * @param {Array<File>} [rapportVocalRapportVocalFiles] 
     * @param {Array<File>} [interventionApresAvantFiles] 
     * @param {Array<File>} [rapportFiles] 
     * @param {Array<ArticleDevis>} [devisAvantTravauxListArticle] 
     * @param {string} [devisAvantTravauxSignataire] 
     * @param {File} [devisAvantTravauxSignature] 
     * @param {string} [devisAvantTravauxModeReglement] 
     * @param {boolean} [devisAvantTravauxFlagEmail] 
     * @param {Array<File>} [devisAvantTravauxPhotosDevisAvantTravauxFiles] 
     * @param {Array<File>} [demandeDeDevisFiles] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterventionApi
     */
    public apiInterventionUpdateInterventionPost(token?: string, noIntervention?: string, codeImmeuble?: string, devisEtablir?: number, bEvent?: boolean, noAstreint?: number, primeConventionnelle?: string, nomSignataire?: string, qualificationSignataire?: string, signature?: File, compteRendu?: string, latitudeDebutIntervention?: string, longitudeDebutIntervention?: string, latitudeFinIntervention?: string, longitudeFinIntervention?: string, latitudeDebutInterventionHZ?: string, longitudeDebutInterventionHZ?: string, latitudeFinInterventionHZ?: string, longitudeFinInterventionHZ?: string, dateDebut?: string, dateFin?: string, dateRealisation?: string, drapeau?: boolean, heuresSupp?: boolean, isAstreintte?: number, rapportVocalSpeechToText?: string, rapportVocalRapportVocalFiles?: Array<File>, interventionApresAvantFiles?: Array<File>, rapportFiles?: Array<File>, devisAvantTravauxListArticle?: Array<ArticleDevis>, devisAvantTravauxSignataire?: string, devisAvantTravauxSignature?: File, devisAvantTravauxModeReglement?: string, devisAvantTravauxFlagEmail?: boolean, devisAvantTravauxPhotosDevisAvantTravauxFiles?: Array<File>, demandeDeDevisFiles?: Array<File>, options?: RawAxiosRequestConfig) {
        return InterventionApiFp(this.configuration).apiInterventionUpdateInterventionPost(token, noIntervention, codeImmeuble, devisEtablir, bEvent, noAstreint, primeConventionnelle, nomSignataire, qualificationSignataire, signature, compteRendu, latitudeDebutIntervention, longitudeDebutIntervention, latitudeFinIntervention, longitudeFinIntervention, latitudeDebutInterventionHZ, longitudeDebutInterventionHZ, latitudeFinInterventionHZ, longitudeFinInterventionHZ, dateDebut, dateFin, dateRealisation, drapeau, heuresSupp, isAstreintte, rapportVocalSpeechToText, rapportVocalRapportVocalFiles, interventionApresAvantFiles, rapportFiles, devisAvantTravauxListArticle, devisAvantTravauxSignataire, devisAvantTravauxSignature, devisAvantTravauxModeReglement, devisAvantTravauxFlagEmail, devisAvantTravauxPhotosDevisAvantTravauxFiles, demandeDeDevisFiles, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReferentielApi - axios parameter creator
 * @export
 */
export const ReferentielApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllArticleDevisGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referentiel/GetAllArticleDevis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllArvalGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referentiel/GetAllArval`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllFamilleDevisGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referentiel/GetAllFamilleDevis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllFlocageGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referentiel/GetAllFlocage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllModeReglementGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referentiel/GetAllModeReglement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllPriPrimeGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referentiel/GetAllPriPrime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllProblemeVehiculeGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referentiel/GetAllProblemeVehicule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllQualificationGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referentiel/GetAllQualification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllSousFamilleDevisGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referentiel/GetAllSousFamilleDevis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllTechnicienGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referentiel/GetAllTechnicien`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetCountOfItemsGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referentiel/GetCountOfItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options, withCredentials : false };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [matricule] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetTechnicienByMatriculeGet: async (matricule?: string, token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Referentiel/GetTechnicienByMatricule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (matricule !== undefined) {
                localVarQueryParameter['matricule'] = matricule;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferentielApi - functional programming interface
 * @export
 */
export const ReferentielApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferentielApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReferentielGetAllArticleDevisGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReferentielGetAllArticleDevisGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferentielApi.apiReferentielGetAllArticleDevisGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReferentielGetAllArvalGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArvalDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReferentielGetAllArvalGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferentielApi.apiReferentielGetAllArvalGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReferentielGetAllFamilleDevisGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FamilleDevisDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReferentielGetAllFamilleDevisGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferentielApi.apiReferentielGetAllFamilleDevisGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReferentielGetAllFlocageGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FlocageDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReferentielGetAllFlocageGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferentielApi.apiReferentielGetAllFlocageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReferentielGetAllModeReglementGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RepReglementPDADTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReferentielGetAllModeReglementGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferentielApi.apiReferentielGetAllModeReglementGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReferentielGetAllPriPrimeGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PriPrimeDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReferentielGetAllPriPrimeGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferentielApi.apiReferentielGetAllPriPrimeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReferentielGetAllProblemeVehiculeGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProblemeVehiculeDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReferentielGetAllProblemeVehiculeGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferentielApi.apiReferentielGetAllProblemeVehiculeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReferentielGetAllQualificationGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QualificationDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReferentielGetAllQualificationGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferentielApi.apiReferentielGetAllQualificationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReferentielGetAllSousFamilleDevisGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SousFamilleDevisDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReferentielGetAllSousFamilleDevisGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferentielApi.apiReferentielGetAllSousFamilleDevisGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReferentielGetAllTechnicienGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TechnicienDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReferentielGetAllTechnicienGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferentielApi.apiReferentielGetAllTechnicienGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReferentielGetCountOfItemsGet(token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountOfItemsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReferentielGetCountOfItemsGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferentielApi.apiReferentielGetCountOfItemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [matricule] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReferentielGetTechnicienByMatriculeGet(matricule?: string, token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TechnicienDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReferentielGetTechnicienByMatriculeGet(matricule, token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferentielApi.apiReferentielGetTechnicienByMatriculeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReferentielApi - factory interface
 * @export
 */
export const ReferentielApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferentielApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllArticleDevisGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<ArticleDTO> {
            return localVarFp.apiReferentielGetAllArticleDevisGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllArvalGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ArvalDTO>> {
            return localVarFp.apiReferentielGetAllArvalGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllFamilleDevisGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<FamilleDevisDTO>> {
            return localVarFp.apiReferentielGetAllFamilleDevisGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllFlocageGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<FlocageDTO>> {
            return localVarFp.apiReferentielGetAllFlocageGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllModeReglementGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<RepReglementPDADTO>> {
            return localVarFp.apiReferentielGetAllModeReglementGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllPriPrimeGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PriPrimeDTO>> {
            return localVarFp.apiReferentielGetAllPriPrimeGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllProblemeVehiculeGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProblemeVehiculeDTO>> {
            return localVarFp.apiReferentielGetAllProblemeVehiculeGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllQualificationGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<QualificationDTO>> {
            return localVarFp.apiReferentielGetAllQualificationGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllSousFamilleDevisGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SousFamilleDevisDTO>> {
            return localVarFp.apiReferentielGetAllSousFamilleDevisGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetAllTechnicienGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<TechnicienDTO>> {
            return localVarFp.apiReferentielGetAllTechnicienGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetCountOfItemsGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<CountOfItemsDTO> {
            return localVarFp.apiReferentielGetCountOfItemsGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [matricule] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReferentielGetTechnicienByMatriculeGet(matricule?: string, token?: string, options?: RawAxiosRequestConfig): AxiosPromise<TechnicienDTO> {
            return localVarFp.apiReferentielGetTechnicienByMatriculeGet(matricule, token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReferentielApi - object-oriented interface
 * @export
 * @class ReferentielApi
 * @extends {BaseAPI}
 */
export class ReferentielApi extends BaseAPI {
    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentielApi
     */
    public apiReferentielGetAllArticleDevisGet(token?: string, options?: RawAxiosRequestConfig) {
        return ReferentielApiFp(this.configuration).apiReferentielGetAllArticleDevisGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentielApi
     */
    public apiReferentielGetAllArvalGet(token?: string, options?: RawAxiosRequestConfig) {
        return ReferentielApiFp(this.configuration).apiReferentielGetAllArvalGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentielApi
     */
    public apiReferentielGetAllFamilleDevisGet(token?: string, options?: RawAxiosRequestConfig) {
        return ReferentielApiFp(this.configuration).apiReferentielGetAllFamilleDevisGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentielApi
     */
    public apiReferentielGetAllFlocageGet(token?: string, options?: RawAxiosRequestConfig) {
        return ReferentielApiFp(this.configuration).apiReferentielGetAllFlocageGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentielApi
     */
    public apiReferentielGetAllModeReglementGet(token?: string, options?: RawAxiosRequestConfig) {
        return ReferentielApiFp(this.configuration).apiReferentielGetAllModeReglementGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentielApi
     */
    public apiReferentielGetAllPriPrimeGet(token?: string, options?: RawAxiosRequestConfig) {
        return ReferentielApiFp(this.configuration).apiReferentielGetAllPriPrimeGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentielApi
     */
    public apiReferentielGetAllProblemeVehiculeGet(token?: string, options?: RawAxiosRequestConfig) {
        return ReferentielApiFp(this.configuration).apiReferentielGetAllProblemeVehiculeGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentielApi
     */
    public apiReferentielGetAllQualificationGet(token?: string, options?: RawAxiosRequestConfig) {
        return ReferentielApiFp(this.configuration).apiReferentielGetAllQualificationGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentielApi
     */
    public apiReferentielGetAllSousFamilleDevisGet(token?: string, options?: RawAxiosRequestConfig) {
        return ReferentielApiFp(this.configuration).apiReferentielGetAllSousFamilleDevisGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentielApi
     */
    public apiReferentielGetAllTechnicienGet(token?: string, options?: RawAxiosRequestConfig) {
        return ReferentielApiFp(this.configuration).apiReferentielGetAllTechnicienGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentielApi
     */
    public apiReferentielGetCountOfItemsGet(token?: string, options?: RawAxiosRequestConfig) {
        return ReferentielApiFp(this.configuration).apiReferentielGetCountOfItemsGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [matricule] 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentielApi
     */
    public apiReferentielGetTechnicienByMatriculeGet(matricule?: string, token?: string, options?: RawAxiosRequestConfig) {
        return ReferentielApiFp(this.configuration).apiReferentielGetTechnicienByMatriculeGet(matricule, token, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WeatherForecastApi - axios parameter creator
 * @export
 */
export const WeatherForecastApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeatherForecast: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WeatherForecast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeatherForecastApi - functional programming interface
 * @export
 */
export const WeatherForecastApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = WeatherForecastApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeatherForecast(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WeatherForecast>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeatherForecast(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WeatherForecastApi.getWeatherForecast']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WeatherForecastApi - factory interface
 * @export
 */
export const WeatherForecastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WeatherForecastApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeatherForecast(options?: RawAxiosRequestConfig): AxiosPromise<Array<WeatherForecast>> {
            return localVarFp.getWeatherForecast(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WeatherForecastApi - object-oriented interface
 * @export
 * @class WeatherForecastApi
 * @extends {BaseAPI}
 */
export class WeatherForecastApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherForecastApi
     */
    public getWeatherForecast(options?: RawAxiosRequestConfig) {
        return WeatherForecastApiFp(this.configuration).getWeatherForecast(options).then((request) => request(this.axios, this.basePath));
    }
}



